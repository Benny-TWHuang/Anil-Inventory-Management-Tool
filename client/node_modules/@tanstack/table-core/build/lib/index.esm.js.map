{"version":3,"file":"index.esm.js","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/columnHelper.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getSortedRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getExpandedRowModel.ts","../../src/utils/getPaginationRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column?.getCanResize()\n\n        return (e: unknown) => {\n          if (!column || !canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const newColumnSizing: ColumnSizingState = {}\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table\n          .getPrePaginationRowModel()\n          .flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(\n    row\n      .getValue<string | null>(columnId)\n      ?.toString()\n      ?.toLowerCase()\n      ?.includes(search)\n  )\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(\n    row.getValue<string | null>(columnId)?.toString()?.includes(filterValue)\n  )\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string | null>(columnId)?.toString()?.toLowerCase() ===\n    filterValue?.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore \n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(row: Row<TData>): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table\n          .getPaginationRowModel()\n          .flatRows.filter(row => row.getCanSelect())\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows\n              .filter(row => row.getCanSelect())\n              .some(d => d.getIsSelected() || d.getIsSomeSelected())\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  parentId?: string\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n  getParentRow: () => Row<TData> | undefined\n  getParentRows: () => Row<TData>[]\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[],\n  parentId?: string\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => (row.parentId ? table.getRow(row.parentId) : undefined),\n    getParentRows: () => {\n      let parentRows: Row<TData>[] = []\n      let currentRow = row\n      while (true) {\n        const parentRow = currentRow.getParentRow()\n        if (!parentRow) break\n        parentRows.push(parentRow)\n        currentRow = parentRow\n      }\n      return parentRows.reverse()\n    },\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parentRow?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parentRow),\n              originalRows[i]!,\n              i,\n              depth,\n              undefined,\n              parentRow?.id\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        undefined,\n        row.parentId\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth,\n            undefined,\n            row.parentId\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if (!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth,\n                undefined,\n                parentId\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0)\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","depsChanged","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","_ref","_resolvedColumnDef$id","defaultColumn","_getDefaultColumnDef","resolvedColumnDef","accessorKey","id","replace","undefined","header","accessorFn","includes","originalRow","split","_result","process","env","NODE_ENV","warn","Error","column","columns","getFlatColumns","_column$columns","flatMap","_table$options$debugA","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_table$options$debugA2","_features","reduce","obj","feature","Object","assign","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","filter","Boolean","rightColumns","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","orderedLeafColumns","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","getDefaultColumnSizingInfoState","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","_column$columnDef$ena","_table$options$enable","enableResizing","enableColumnResizing","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","newColumnSizing","updateOffset","eventType","clientXPos","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","_table$initialState$c","initialState","resetHeaderSizeInfo","_table$initialState$c2","getTotalSize","_table$getHeaderGroup","_table$getHeaderGroup2","getLeftTotalSize","_table$getLeftHeaderG","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","_queue","autoResetAll","autoResetExpanded","manualExpanding","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","_table$initialState","getCanSomeRowsExpand","getPrePaginationRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getRowModel","getIsExpanded","getExpandedDepth","rowIds","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","_row$getValue","_row$getValue$toStrin","_row$getValue$toStrin2","search","toLowerCase","getValue","toString","autoRemove","val","testFalsey","includesStringSensitive","_row$getValue2","_row$getValue2$toStri","equalsString","_row$getValue3","_row$getValue3$toStri","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","_table$getCoreRowMode2","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","Array","isArray","getFilterFn","_table$options$filter","_table$options$filter2","getCanFilter","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","_table$getState$colum4","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","_old$filter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter3","_table$options$filter4","getAllLeafColumns","updateFn","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","unique","from","Set","uniqueCount","_columnId","aggregationFns","Grouping","aggregatedCell","props","_toString","_props$getValue","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","_table$options$aggreg","_table$options$aggreg2","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","groupingColumns","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","pagination","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","_table$initialState$p","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","_table$initialState$p3","resetPageSize","_table$initialState$p4","_table$initialState2","_table$initialState2$","setPageSize","topRowIndex","floor","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPaginationRowModel","_getPaginationRowModel","_table$options$pageCo2","ceil","rows","getDefaultPinningState","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","cells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","_table$initialState$r","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","a","b","basic","aStr","bStr","aa","bb","an","parseInt","bn","combo","sort","sortingFns","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","_table$options$sortin","_table$options$sortin2","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","newSorting","sortAction","nextDesc","getCanMultiSort","_table$options$maxMul","maxMultiSortColCount","getFirstSortDir","_column$columnDef$sor","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","_options$initialState","defaultOptions","mergeOptions","coreInitialState","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","_defaultColumn","_props$renderValue$to","_props$renderValue","renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","getRenderValue","_cell$getValue","renderFallbackValue","original","rowIndex","parentId","_valuesCache","_uniqueValuesCache","hasOwnProperty","getUniqueValues","getLeafRows","getParentRow","getParentRows","parentRows","currentRow","parentRow","createColumnHelper","accessor","display","group","data","accessRows","originalRows","getSubRows","_row$originalSubRows","originalSubRows","filterRows","filterRowImpl","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","_table$options$maxLea","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","_table$options$maxLea2","pass","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","filterableIds","globallyFilterableColumns","_globalFilterFn$resol","currentColumnFilter","currentGlobalFilter","j","filterMeta","__global__","filterRowsImpl","preRowModel","_table$getColumn","facetedRowModel","facetedUniqueValues","has","_facetedUniqueValues$","set","get","_facetedRowModel$flat","firstValue","facetedMinMaxValues","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","_sortEntry$desc","columnInfo","isDesc","aValue","bValue","aUndefined","bUndefined","sortInt","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","groupMap","resKey","previous","expandRows","expandedRows","handleRow","pageStart","pageEnd","paginatedRowModel"],"mappings":"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"}