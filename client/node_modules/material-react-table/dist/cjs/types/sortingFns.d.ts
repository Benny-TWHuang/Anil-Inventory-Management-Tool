import { type Row } from '@tanstack/react-table';
import type { MRT_Row } from '.';
export declare const MRT_SortingFns: {
    fuzzy: <TData extends Record<string, any> = {}>(rowA: Row<TData>, rowB: Row<TData>, columnId: string) => number;
    alphanumeric: import("@tanstack/react-table").SortingFn<any>;
    alphanumericCaseSensitive: import("@tanstack/react-table").SortingFn<any>;
    text: import("@tanstack/react-table").SortingFn<any>;
    textCaseSensitive: import("@tanstack/react-table").SortingFn<any>;
    datetime: import("@tanstack/react-table").SortingFn<any>;
    basic: import("@tanstack/react-table").SortingFn<any>;
};
export declare const rankGlobalFuzzy: <TData extends Record<string, any> = {}>(rowA: {
    getValue: <TValue>(columnId: string) => TValue;
    renderValue: <TValue_1>(columnId: string) => TValue_1;
    id: string;
    columnFilters: Record<string, boolean>;
    index: number;
    original: TData;
    depth: number;
    parentId?: string | undefined;
    _uniqueValuesCache: Record<string, unknown>;
    getUniqueValues: <TValue_2>(columnId: string) => TValue_2[];
    getLeafRows: () => Row<TData>[];
    originalSubRows?: TData[] | undefined;
    _getAllCellsByColumnId: () => Record<string, import("@tanstack/react-table").Cell<TData, unknown>>;
    getParentRow: () => Row<TData> | undefined;
    getParentRows: () => Row<TData>[];
    _getAllVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
    getLeftVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
    getCenterVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
    getRightVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
    columnFiltersMeta: Record<string, import("@tanstack/react-table").FilterMeta>;
    groupingColumnId?: string | undefined;
    groupingValue?: unknown;
    getIsGrouped: () => boolean;
    _groupingValuesCache: Record<string, any>;
    getIsSelected: () => boolean;
    getIsSomeSelected: () => boolean;
    getIsAllSubRowsSelected: () => boolean;
    getCanSelect: () => boolean;
    getCanMultiSelect: () => boolean;
    getCanSelectSubRows: () => boolean;
    toggleSelected: (value?: boolean | undefined) => void;
    getToggleSelectedHandler: () => (event: unknown) => void;
    toggleExpanded: (expanded?: boolean | undefined) => void;
    getIsExpanded: () => boolean;
    getCanExpand: () => boolean;
    getToggleExpandedHandler: () => () => void;
    getAllCells: () => {
        getValue: import("@tanstack/react-table").Getter<unknown>;
        renderValue: import("@tanstack/react-table").Getter<unknown>;
        id: string;
        getContext: () => import("@tanstack/react-table").CellContext<TData, unknown>;
        getIsGrouped: () => boolean;
        getIsPlaceholder: () => boolean;
        getIsAggregated: () => boolean;
        column: import("./MaterialReactTable").MRT_Column<TData>;
        row: {
            getValue: <TValue>(columnId: string) => TValue;
            renderValue: <TValue_1>(columnId: string) => TValue_1;
            id: string;
            columnFilters: Record<string, boolean>;
            index: number;
            original: TData;
            depth: number;
            parentId?: string | undefined;
            _uniqueValuesCache: Record<string, unknown>;
            getUniqueValues: <TValue_2>(columnId: string) => TValue_2[];
            getLeafRows: () => Row<TData>[];
            originalSubRows?: TData[] | undefined;
            _getAllCellsByColumnId: () => Record<string, import("@tanstack/react-table").Cell<TData, unknown>>;
            getParentRow: () => Row<TData> | undefined;
            getParentRows: () => Row<TData>[];
            _getAllVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
            getLeftVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
            getCenterVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
            getRightVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
            columnFiltersMeta: Record<string, import("@tanstack/react-table").FilterMeta>;
            groupingColumnId?: string | undefined;
            groupingValue?: unknown;
            getIsGrouped: () => boolean;
            _groupingValuesCache: Record<string, any>;
            getIsSelected: () => boolean;
            getIsSomeSelected: () => boolean;
            getIsAllSubRowsSelected: () => boolean;
            getCanSelect: () => boolean;
            getCanMultiSelect: () => boolean;
            getCanSelectSubRows: () => boolean;
            toggleSelected: (value?: boolean | undefined) => void;
            getToggleSelectedHandler: () => (event: unknown) => void;
            toggleExpanded: (expanded?: boolean | undefined) => void;
            getIsExpanded: () => boolean;
            getCanExpand: () => boolean;
            getToggleExpandedHandler: () => () => void;
            getAllCells: any;
            getVisibleCells: () => any[];
            subRows?: any[] | undefined;
            _valuesCache: Record<(string & Record<never, never>) | (string & import("@tanstack/react-table").DeepKeys<TData>), any>;
        };
    }[];
    getVisibleCells: () => {
        getValue: import("@tanstack/react-table").Getter<unknown>;
        renderValue: import("@tanstack/react-table").Getter<unknown>;
        id: string;
        getContext: () => import("@tanstack/react-table").CellContext<TData, unknown>;
        getIsGrouped: () => boolean;
        getIsPlaceholder: () => boolean;
        getIsAggregated: () => boolean;
        column: import("./MaterialReactTable").MRT_Column<TData>;
        row: {
            getValue: <TValue>(columnId: string) => TValue;
            renderValue: <TValue_1>(columnId: string) => TValue_1;
            id: string;
            columnFilters: Record<string, boolean>;
            index: number;
            original: TData;
            depth: number;
            parentId?: string | undefined;
            _uniqueValuesCache: Record<string, unknown>;
            getUniqueValues: <TValue_2>(columnId: string) => TValue_2[];
            getLeafRows: () => Row<TData>[];
            originalSubRows?: TData[] | undefined;
            _getAllCellsByColumnId: () => Record<string, import("@tanstack/react-table").Cell<TData, unknown>>;
            getParentRow: () => Row<TData> | undefined;
            getParentRows: () => Row<TData>[];
            _getAllVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
            getLeftVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
            getCenterVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
            getRightVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
            columnFiltersMeta: Record<string, import("@tanstack/react-table").FilterMeta>;
            groupingColumnId?: string | undefined;
            groupingValue?: unknown;
            getIsGrouped: () => boolean;
            _groupingValuesCache: Record<string, any>;
            getIsSelected: () => boolean;
            getIsSomeSelected: () => boolean;
            getIsAllSubRowsSelected: () => boolean;
            getCanSelect: () => boolean;
            getCanMultiSelect: () => boolean;
            getCanSelectSubRows: () => boolean;
            toggleSelected: (value?: boolean | undefined) => void;
            getToggleSelectedHandler: () => (event: unknown) => void;
            toggleExpanded: (expanded?: boolean | undefined) => void;
            getIsExpanded: () => boolean;
            getCanExpand: () => boolean;
            getToggleExpandedHandler: () => () => void;
            getAllCells: () => any[];
            getVisibleCells: any;
            subRows?: any[] | undefined;
            _valuesCache: Record<(string & Record<never, never>) | (string & import("@tanstack/react-table").DeepKeys<TData>), any>;
        };
    }[];
    subRows?: {
        getValue: <TValue>(columnId: string) => TValue;
        renderValue: <TValue_1>(columnId: string) => TValue_1;
        id: string;
        columnFilters: Record<string, boolean>;
        index: number;
        original: TData;
        depth: number;
        parentId?: string | undefined;
        _uniqueValuesCache: Record<string, unknown>;
        getUniqueValues: <TValue_2>(columnId: string) => TValue_2[];
        getLeafRows: () => Row<TData>[];
        originalSubRows?: TData[] | undefined;
        _getAllCellsByColumnId: () => Record<string, import("@tanstack/react-table").Cell<TData, unknown>>;
        getParentRow: () => Row<TData> | undefined;
        getParentRows: () => Row<TData>[];
        _getAllVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
        getLeftVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
        getCenterVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
        getRightVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
        columnFiltersMeta: Record<string, import("@tanstack/react-table").FilterMeta>;
        groupingColumnId?: string | undefined;
        groupingValue?: unknown;
        getIsGrouped: () => boolean;
        _groupingValuesCache: Record<string, any>;
        getIsSelected: () => boolean;
        getIsSomeSelected: () => boolean;
        getIsAllSubRowsSelected: () => boolean;
        getCanSelect: () => boolean;
        getCanMultiSelect: () => boolean;
        getCanSelectSubRows: () => boolean;
        toggleSelected: (value?: boolean | undefined) => void;
        getToggleSelectedHandler: () => (event: unknown) => void;
        toggleExpanded: (expanded?: boolean | undefined) => void;
        getIsExpanded: () => boolean;
        getCanExpand: () => boolean;
        getToggleExpandedHandler: () => () => void;
        getAllCells: () => {
            getValue: import("@tanstack/react-table").Getter<unknown>;
            renderValue: import("@tanstack/react-table").Getter<unknown>;
            id: string;
            getContext: () => import("@tanstack/react-table").CellContext<TData, unknown>;
            getIsGrouped: () => boolean;
            getIsPlaceholder: () => boolean;
            getIsAggregated: () => boolean;
            column: import("./MaterialReactTable").MRT_Column<TData>;
            row: any;
        }[];
        getVisibleCells: () => {
            getValue: import("@tanstack/react-table").Getter<unknown>;
            renderValue: import("@tanstack/react-table").Getter<unknown>;
            id: string;
            getContext: () => import("@tanstack/react-table").CellContext<TData, unknown>;
            getIsGrouped: () => boolean;
            getIsPlaceholder: () => boolean;
            getIsAggregated: () => boolean;
            column: import("./MaterialReactTable").MRT_Column<TData>;
            row: any;
        }[];
        subRows?: any[] | undefined;
        _valuesCache: Record<(string & Record<never, never>) | (string & import("@tanstack/react-table").DeepKeys<TData>), any>;
    }[] | undefined;
    _valuesCache: Record<(string & Record<never, never>) | (string & import("@tanstack/react-table").DeepKeys<TData>), any>;
}, rowB: {
    getValue: <TValue>(columnId: string) => TValue;
    renderValue: <TValue_1>(columnId: string) => TValue_1;
    id: string;
    columnFilters: Record<string, boolean>;
    index: number;
    original: TData;
    depth: number;
    parentId?: string | undefined;
    _uniqueValuesCache: Record<string, unknown>;
    getUniqueValues: <TValue_2>(columnId: string) => TValue_2[];
    getLeafRows: () => Row<TData>[];
    originalSubRows?: TData[] | undefined;
    _getAllCellsByColumnId: () => Record<string, import("@tanstack/react-table").Cell<TData, unknown>>;
    getParentRow: () => Row<TData> | undefined;
    getParentRows: () => Row<TData>[];
    _getAllVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
    getLeftVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
    getCenterVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
    getRightVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
    columnFiltersMeta: Record<string, import("@tanstack/react-table").FilterMeta>;
    groupingColumnId?: string | undefined;
    groupingValue?: unknown;
    getIsGrouped: () => boolean;
    _groupingValuesCache: Record<string, any>;
    getIsSelected: () => boolean;
    getIsSomeSelected: () => boolean;
    getIsAllSubRowsSelected: () => boolean;
    getCanSelect: () => boolean;
    getCanMultiSelect: () => boolean;
    getCanSelectSubRows: () => boolean;
    toggleSelected: (value?: boolean | undefined) => void;
    getToggleSelectedHandler: () => (event: unknown) => void;
    toggleExpanded: (expanded?: boolean | undefined) => void;
    getIsExpanded: () => boolean;
    getCanExpand: () => boolean;
    getToggleExpandedHandler: () => () => void;
    getAllCells: () => {
        getValue: import("@tanstack/react-table").Getter<unknown>;
        renderValue: import("@tanstack/react-table").Getter<unknown>;
        id: string;
        getContext: () => import("@tanstack/react-table").CellContext<TData, unknown>;
        getIsGrouped: () => boolean;
        getIsPlaceholder: () => boolean;
        getIsAggregated: () => boolean;
        column: import("./MaterialReactTable").MRT_Column<TData>;
        row: {
            getValue: <TValue>(columnId: string) => TValue;
            renderValue: <TValue_1>(columnId: string) => TValue_1;
            id: string;
            columnFilters: Record<string, boolean>;
            index: number;
            original: TData;
            depth: number;
            parentId?: string | undefined;
            _uniqueValuesCache: Record<string, unknown>;
            getUniqueValues: <TValue_2>(columnId: string) => TValue_2[];
            getLeafRows: () => Row<TData>[];
            originalSubRows?: TData[] | undefined;
            _getAllCellsByColumnId: () => Record<string, import("@tanstack/react-table").Cell<TData, unknown>>;
            getParentRow: () => Row<TData> | undefined;
            getParentRows: () => Row<TData>[];
            _getAllVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
            getLeftVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
            getCenterVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
            getRightVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
            columnFiltersMeta: Record<string, import("@tanstack/react-table").FilterMeta>;
            groupingColumnId?: string | undefined;
            groupingValue?: unknown;
            getIsGrouped: () => boolean;
            _groupingValuesCache: Record<string, any>;
            getIsSelected: () => boolean;
            getIsSomeSelected: () => boolean;
            getIsAllSubRowsSelected: () => boolean;
            getCanSelect: () => boolean;
            getCanMultiSelect: () => boolean;
            getCanSelectSubRows: () => boolean;
            toggleSelected: (value?: boolean | undefined) => void;
            getToggleSelectedHandler: () => (event: unknown) => void;
            toggleExpanded: (expanded?: boolean | undefined) => void;
            getIsExpanded: () => boolean;
            getCanExpand: () => boolean;
            getToggleExpandedHandler: () => () => void;
            getAllCells: any;
            getVisibleCells: () => any[];
            subRows?: any[] | undefined;
            _valuesCache: Record<(string & Record<never, never>) | (string & import("@tanstack/react-table").DeepKeys<TData>), any>;
        };
    }[];
    getVisibleCells: () => {
        getValue: import("@tanstack/react-table").Getter<unknown>;
        renderValue: import("@tanstack/react-table").Getter<unknown>;
        id: string;
        getContext: () => import("@tanstack/react-table").CellContext<TData, unknown>;
        getIsGrouped: () => boolean;
        getIsPlaceholder: () => boolean;
        getIsAggregated: () => boolean;
        column: import("./MaterialReactTable").MRT_Column<TData>;
        row: {
            getValue: <TValue>(columnId: string) => TValue;
            renderValue: <TValue_1>(columnId: string) => TValue_1;
            id: string;
            columnFilters: Record<string, boolean>;
            index: number;
            original: TData;
            depth: number;
            parentId?: string | undefined;
            _uniqueValuesCache: Record<string, unknown>;
            getUniqueValues: <TValue_2>(columnId: string) => TValue_2[];
            getLeafRows: () => Row<TData>[];
            originalSubRows?: TData[] | undefined;
            _getAllCellsByColumnId: () => Record<string, import("@tanstack/react-table").Cell<TData, unknown>>;
            getParentRow: () => Row<TData> | undefined;
            getParentRows: () => Row<TData>[];
            _getAllVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
            getLeftVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
            getCenterVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
            getRightVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
            columnFiltersMeta: Record<string, import("@tanstack/react-table").FilterMeta>;
            groupingColumnId?: string | undefined;
            groupingValue?: unknown;
            getIsGrouped: () => boolean;
            _groupingValuesCache: Record<string, any>;
            getIsSelected: () => boolean;
            getIsSomeSelected: () => boolean;
            getIsAllSubRowsSelected: () => boolean;
            getCanSelect: () => boolean;
            getCanMultiSelect: () => boolean;
            getCanSelectSubRows: () => boolean;
            toggleSelected: (value?: boolean | undefined) => void;
            getToggleSelectedHandler: () => (event: unknown) => void;
            toggleExpanded: (expanded?: boolean | undefined) => void;
            getIsExpanded: () => boolean;
            getCanExpand: () => boolean;
            getToggleExpandedHandler: () => () => void;
            getAllCells: () => any[];
            getVisibleCells: any;
            subRows?: any[] | undefined;
            _valuesCache: Record<(string & Record<never, never>) | (string & import("@tanstack/react-table").DeepKeys<TData>), any>;
        };
    }[];
    subRows?: {
        getValue: <TValue>(columnId: string) => TValue;
        renderValue: <TValue_1>(columnId: string) => TValue_1;
        id: string;
        columnFilters: Record<string, boolean>;
        index: number;
        original: TData;
        depth: number;
        parentId?: string | undefined;
        _uniqueValuesCache: Record<string, unknown>;
        getUniqueValues: <TValue_2>(columnId: string) => TValue_2[];
        getLeafRows: () => Row<TData>[];
        originalSubRows?: TData[] | undefined;
        _getAllCellsByColumnId: () => Record<string, import("@tanstack/react-table").Cell<TData, unknown>>;
        getParentRow: () => Row<TData> | undefined;
        getParentRows: () => Row<TData>[];
        _getAllVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
        getLeftVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
        getCenterVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
        getRightVisibleCells: () => import("@tanstack/react-table").Cell<TData, unknown>[];
        columnFiltersMeta: Record<string, import("@tanstack/react-table").FilterMeta>;
        groupingColumnId?: string | undefined;
        groupingValue?: unknown;
        getIsGrouped: () => boolean;
        _groupingValuesCache: Record<string, any>;
        getIsSelected: () => boolean;
        getIsSomeSelected: () => boolean;
        getIsAllSubRowsSelected: () => boolean;
        getCanSelect: () => boolean;
        getCanMultiSelect: () => boolean;
        getCanSelectSubRows: () => boolean;
        toggleSelected: (value?: boolean | undefined) => void;
        getToggleSelectedHandler: () => (event: unknown) => void;
        toggleExpanded: (expanded?: boolean | undefined) => void;
        getIsExpanded: () => boolean;
        getCanExpand: () => boolean;
        getToggleExpandedHandler: () => () => void;
        getAllCells: () => {
            getValue: import("@tanstack/react-table").Getter<unknown>;
            renderValue: import("@tanstack/react-table").Getter<unknown>;
            id: string;
            getContext: () => import("@tanstack/react-table").CellContext<TData, unknown>;
            getIsGrouped: () => boolean;
            getIsPlaceholder: () => boolean;
            getIsAggregated: () => boolean;
            column: import("./MaterialReactTable").MRT_Column<TData>;
            row: any;
        }[];
        getVisibleCells: () => {
            getValue: import("@tanstack/react-table").Getter<unknown>;
            renderValue: import("@tanstack/react-table").Getter<unknown>;
            id: string;
            getContext: () => import("@tanstack/react-table").CellContext<TData, unknown>;
            getIsGrouped: () => boolean;
            getIsPlaceholder: () => boolean;
            getIsAggregated: () => boolean;
            column: import("./MaterialReactTable").MRT_Column<TData>;
            row: any;
        }[];
        subRows?: any[] | undefined;
        _valuesCache: Record<(string & Record<never, never>) | (string & import("@tanstack/react-table").DeepKeys<TData>), any>;
    }[] | undefined;
    _valuesCache: Record<(string & Record<never, never>) | (string & import("@tanstack/react-table").DeepKeys<TData>), any>;
}) => number;
