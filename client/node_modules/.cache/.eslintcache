[{"/home/test/Desktop/aimt/client/src/index.js":"1","/home/test/Desktop/aimt/client/src/reportWebVitals.js":"2","/home/test/Desktop/aimt/client/src/App.js":"3","/home/test/Desktop/aimt/client/src/login/Login.js":"4","/home/test/Desktop/aimt/client/src/menu/Menu.js":"5","/home/test/Desktop/aimt/client/src/login/useToken.js":"6","/home/test/Desktop/aimt/client/src/navigatebar/Navigatebar.js":"7","/home/test/Desktop/aimt/client/src/button_img/ButtonImage.js":"8","/home/test/Desktop/aimt/client/src/adapter/Adapter.js":"9","/home/test/Desktop/aimt/client/src/show/Show.js":"10","/home/test/Desktop/aimt/client/src/popup/Popup.js":"11","/home/test/Desktop/aimt/client/src/module/Module.js":"12","/home/test/Desktop/aimt/client/src/info/Info.js":"13","/home/test/Desktop/aimt/client/src/account/Account.js":"14","/home/test/Desktop/aimt/client/src/guide/Guide.js":"15","/home/test/Desktop/aimt/client/src/rules/Rules.js":"16","/home/test/Desktop/aimt/client/src/tutorial/Tutorial.js":"17","/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/index.js":"18","/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/reportWebVitals.js":"19","/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/App.js":"20","/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/module/Module.js":"21","/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/menu/Menu.js":"22","/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/adapter/Adapter.js":"23","/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/login/useToken.js":"24","/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/login/Login.js":"25","/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/info/Info.js":"26","/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/account/Account.js":"27","/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/show/Show.js":"28","/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/guide/Guide.js":"29","/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/tutorial/Tutorial.js":"30","/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/rules/Rules.js":"31","/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/navigatebar/Navigatebar.js":"32","/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/button_img/ButtonImage.js":"33","/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/show/SortTable.js":"34","/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/sorttable/Sorttable.js":"35"},{"size":674,"mtime":1675242279512,"results":"36","hashOfConfig":"37"},{"size":362,"mtime":1669771471211,"results":"38","hashOfConfig":"37"},{"size":3622,"mtime":1680058761786,"results":"39","hashOfConfig":"37"},{"size":1682,"mtime":1677746380959,"results":"40","hashOfConfig":"37"},{"size":1271,"mtime":1681205650087,"results":"41","hashOfConfig":"37"},{"size":543,"mtime":1676995877195,"results":"42","hashOfConfig":"37"},{"size":2607,"mtime":1678253323578,"results":"43","hashOfConfig":"37"},{"size":470,"mtime":1675838941738,"results":"44","hashOfConfig":"37"},{"size":959,"mtime":1678243259982,"results":"45","hashOfConfig":"37"},{"size":42925,"mtime":1680060006974,"results":"46","hashOfConfig":"37"},{"size":463,"mtime":1676231504948,"results":"47","hashOfConfig":"37"},{"size":548,"mtime":1676254690304,"results":"48","hashOfConfig":"37"},{"size":1210,"mtime":1678254957982,"results":"49","hashOfConfig":"37"},{"size":1005,"mtime":1677580684704,"results":"50","hashOfConfig":"37"},{"size":1946,"mtime":1678254745706,"results":"51","hashOfConfig":"37"},{"size":2101,"mtime":1678178740753,"results":"52","hashOfConfig":"37"},{"size":2658,"mtime":1680058935482,"results":"53","hashOfConfig":"37"},{"size":674,"mtime":1681977281539,"results":"54","hashOfConfig":"55"},{"size":362,"mtime":1681977281539,"results":"56","hashOfConfig":"55"},{"size":3761,"mtime":1689745804834,"results":"57","hashOfConfig":"55"},{"size":806,"mtime":1682588884600,"results":"58","hashOfConfig":"55"},{"size":1256,"mtime":1682588678420,"results":"59","hashOfConfig":"55"},{"size":1239,"mtime":1682589023084,"results":"60","hashOfConfig":"55"},{"size":543,"mtime":1681977281539,"results":"61","hashOfConfig":"55"},{"size":1682,"mtime":1689911376516,"results":"62","hashOfConfig":"55"},{"size":1465,"mtime":1682588926084,"results":"63","hashOfConfig":"55"},{"size":1271,"mtime":1682589084020,"results":"64","hashOfConfig":"55"},{"size":43169,"mtime":1682707330082,"results":"65","hashOfConfig":"55"},{"size":2212,"mtime":1682588971184,"results":"66","hashOfConfig":"55"},{"size":3016,"mtime":1682588103568,"results":"67","hashOfConfig":"55"},{"size":2497,"mtime":1682588804140,"results":"68","hashOfConfig":"55"},{"size":2607,"mtime":1681977281539,"results":"69","hashOfConfig":"55"},{"size":470,"mtime":1681977281539,"results":"70","hashOfConfig":"55"},{"size":23648,"mtime":1682707159798,"results":"71","hashOfConfig":"55"},{"size":42575,"mtime":1689756829122,"results":"72","hashOfConfig":"55"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"2n6zre",{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},"1ggb81x",{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181"},"/home/test/Desktop/aimt/client/src/index.js",[],[],[],"/home/test/Desktop/aimt/client/src/reportWebVitals.js",[],[],"/home/test/Desktop/aimt/client/src/App.js",[],[],"/home/test/Desktop/aimt/client/src/login/Login.js",[],[],"/home/test/Desktop/aimt/client/src/menu/Menu.js",["182"],[],"/home/test/Desktop/aimt/client/src/login/useToken.js",[],[],"/home/test/Desktop/aimt/client/src/navigatebar/Navigatebar.js",[],[],"/home/test/Desktop/aimt/client/src/button_img/ButtonImage.js",[],[],"/home/test/Desktop/aimt/client/src/adapter/Adapter.js",[],[],"/home/test/Desktop/aimt/client/src/show/Show.js",[],[],[],"/home/test/Desktop/aimt/client/src/popup/Popup.js",[],[],"/home/test/Desktop/aimt/client/src/module/Module.js",[],[],"/home/test/Desktop/aimt/client/src/info/Info.js",[],[],"/home/test/Desktop/aimt/client/src/account/Account.js",[],[],"/home/test/Desktop/aimt/client/src/guide/Guide.js",[],[],"/home/test/Desktop/aimt/client/src/rules/Rules.js",[],[],"/home/test/Desktop/aimt/client/src/tutorial/Tutorial.js",[],[],"/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/index.js",[],[],[],"/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/reportWebVitals.js",[],[],"/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/App.js",[],[],"/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/module/Module.js",[],[],"/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/menu/Menu.js",[],[],"/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/adapter/Adapter.js",[],[],"/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/login/useToken.js",[],[],"/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/login/Login.js",[],[],"/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/info/Info.js",[],[],"/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/account/Account.js",[],[],"/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/show/Show.js",[],[],"/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/guide/Guide.js",[],[],"/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/tutorial/Tutorial.js",[],[],"/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/rules/Rules.js",[],[],"/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/navigatebar/Navigatebar.js",[],[],"/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/button_img/ButtonImage.js",[],[],"/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/show/SortTable.js",["183","184","185","186"],[],"/home/test/Desktop/Anil-Inventory-Management-Tool/client/src/sorttable/Sorttable.js",["187"],[],"import './Sorttable.css';\nimport React from 'react';\nimport Breadcrumb from 'react-bootstrap/Breadcrumb';\nimport { Button, Modal } from 'react-bootstrap';\nimport { useState, useEffect, useRef } from 'react';\n\nexport default function Sorttable(props) {\n  const renderAfterCalled = useRef(false);\n  const [uid, setuid] = useState();\n  const [da, setDa] = useState();\n  const [inda, setInda] = useState();\n  const [update,setUpdate] = useState(false);\n  const updateClose = () => {setUpdate(false); window.location.reload();};\n  const updateShow = () => {if (props.membertype === \"1\") {\n                              setUpdate(true);\n                            } else if (props.membertype === \"2\") {\n                              alert(\"You don't have the permission to add new device.\")\n                            } else {\n                              alert(\"You don't have the permission to add new device.\")\n                            }};\n  const [upsta,setUpsta] = useState(false);\n  const upstaClose = () => {setUpsta(false); window.location.reload();};\n  const upstaShow = () => {if (props.membertype === \"1\") {\n                              setUpsta(true);\n                            } else if (props.membertype === \"2\") {\n                              alert(\"You don't have the permission to update device status.\")\n                            } else {\n                              alert(\"You don't have the permission to update device status.\")\n                            }};\n  const [upnot,setUpnot] = useState(false);\n  const upnotClose = () => {setUpnot(false); window.location.reload();};\n  const upnotShow = () => {if (props.membertype === \"1\") {\n                              setUpnot(true);\n                            } else if (props.membertype === \"2\") {\n                              setUpnot(true);\n                            } else {\n                              alert(\"You don't have the permission to update device note.\")\n                            }};\n  const [modify,setModify] = useState(false);\n  const modifyClose = () => {setModify(false); window.location.reload();};\n  const modifyShow = () => {if (props.membertype === \"1\") {\n                              setButtonPop(false);\n                              setModify(true);\n                            } else if (props.membertype === \"2\") {\n                              setButtonPop(false);\n                              setModify(true);\n                            } else {\n                              alert(\"You don't have the permission to modify device information.\")\n                            }};\n  const [upuid,setUpuid] = useState(false);\n  const upuidClose = () => {setUpuid(false); window.location.reload();};\n  const upuidShow = () => {if (props.membertype === \"1\") {\n                              setButtonPop(false);\n                              setUpuid(true);\n                            } else if (props.membertype === \"2\") {\n                              alert(\"You don't have the permission to modify device information.\")\n                            } else {\n                              alert(\"You don't have the permission to modify device information.\")\n                            }};\n  const [ButtonPop,setButtonPop] = useState(false);\n  const handleClose = () => setButtonPop(false);\n  const handleShow = (e) => {setuid(e.target.parentElement.innerText.split('\\t')[1]); \n                            if(props.value.substring(0, 3) === \"ada\" || props.value === \"legacy\") {\n                              setOldProductName(e.target.parentElement.innerText.split('\\t')[2]); \n                              setOldFamily(e.target.parentElement.childNodes[3].innerText); \n                            } else if (props.value === \"module\" || props.value === \"AOC\" || props.value === \"DAC\") {\n                              setOldProductName(e.target.parentElement.innerText.split('\\t')[2]); \n                              setOldVendor(e.target.parentElement.innerText.split('\\t')[3]); \n                              setOldFamily(e.target.parentElement.innerText.split('\\t')[4]); \n                              setOldSpeed(e.target.parentElement.innerText.split('\\t')[5]); \n                              setOldDistance(e.target.parentElement.innerText.split('\\t')[6]); \n                              setOldWavelength(e.target.parentElement.innerText.split('\\t')[7]); \n                              setOldInterface(e.target.parentElement.innerText.split('\\t')[8]); \n                            }  else if(props.value === \"tools\") {\n                              setOldProductName(e.target.parentElement.innerText.split('\\t')[2]); \n                            }\n                            setButtonPop(true);};\n  const [person,setPerson] = useState(false);\n  const [WWID,setwwid] = useState();\n  const personClose = () => setPerson(false);\n  const personShow = (e) => {if(e.target.parentElement.childNodes[3].innerText === \"NA\") {\n                              setPerson(false);\n                            } else {\n                              setPerson(true);\n\n                            }};\n                          \n\n  const [newUID, setNewUID] = useState();\n  const [product_name, setProductName] = useState();\n  const [family, setFamily] = useState();\n  const [location, setLocation] = useState();\n  const [status, setStatus] = useState();\n  const [borrower, setBorrower] = useState();\n  const [note, setNote] = useState();\n  \n  const [vendor, setVendor] = useState();\n  const [speed, setSpeed] = useState();\n  const [distance, setDistance] = useState();\n  const [wavelength, setWavelength] = useState();\n  const [inter, setInterface] = useState();\n\n  const [old_product_name, setOldProductName] = useState();\n  const [old_family, setOldFamily] = useState();\n  const [old_vendor, setOldVendor] = useState();\n  const [old_speed, setOldSpeed] = useState();\n  const [old_distance, setOldDistance] = useState();\n  const [old_wavelength, setOldWavelength] = useState();\n  const [old_inter, setOldInterface] = useState();\n\n  const fetchUID = async (cur_uid) => {\n    return fetch('/api/uid', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ask: props.value, curuid: cur_uid})\n    })\n      .then(response => response.json())\n      .then(data => setInda(data))\n  }   \n\n  const fetchwwid = async (wwid) => {\n    if(wwid === 'NA') {\n      setwwid(undefined);\n      return;\n    }\n    return fetch('/api/wwid', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({wwid: wwid})\n    })\n      .then(response => response.json())\n      .then(data => setwwid(data))\n  }   \n\n  let per_info = <></>;\n  if (WWID === undefined) {\n    per_info = <></>;\n  } else {\n    per_info = <>\n                <p>Name: {WWID.name}</p>\n                <p>IDSID: {WWID.ssid}</p>\n                <p>WWID: {WWID.id}</p>\n                <p>Mail:{WWID.mail}</p>\n              </>;\n  }\n\n  const addNew = async () => {\n    if(props.value.substring(0, 3) === \"ada\" || props.value === \"legacy\"){\n      if(newUID === undefined || newUID === \"\" || product_name === undefined || product_name === \"\" || family === undefined || family === \"\" || location === undefined || location === \"\"  || status === undefined || status === \"\") {\n        alert(\"Please fill the boxes.(not include optional boxes)\")\n      } else {\n        return await fetch('/api/update', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ask: props.value,uid: newUID, product: product_name, family: family, location: location, status: status, borrower: borrower, note: note})\n        })\n          .then(response => response.text())\n          .then(updateClose())\n      }\n    } else if (props.value === \"module\" || props.value === \"AOC\" || props.value === \"DAC\") {\n      if(newUID === undefined || newUID === \"\" || speed === undefined || speed === \"\" || family === undefined || family === \"\" || location === undefined || location === \"\"  || status === undefined || status === \"\") {\n        alert(\"Please fill the boxes.(not include optional boxes)\")\n      } else if(vendor === undefined || vendor === \"\" || product_name === undefined || product_name === \"\" || distance === undefined || distance === \"\" || wavelength === undefined || wavelength === \"\"  || inter === undefined || inter === \"\") {\n        alert(\"Please fill the boxes.(not include optional boxes)\")\n      } else {\n        return await fetch('/api/update', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ask: props.value,uid: newUID, model: product_name, vendor: vendor, type: family, speed: speed, distance: distance, wavelength: wavelength, inter: inter , location: location, status: status, borrower: borrower, note: note})\n        })\n          .then(response => response.text())\n          .then(updateClose())\n      }\n    } else if(props.value === \"tools\") {\n      if(newUID === undefined || newUID === \"\" || product_name === undefined || product_name === \"\" || status === undefined || status === \"\") {\n        alert(\"Please fill the boxes.(not include optional boxes)\")\n      } else {\n        return await fetch('/api/update', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ask: props.value,uid: newUID, item: product_name, status: status, borrower: borrower, note: note})\n        })\n          .then(response => response.text())\n          .then(updateClose())\n      }\n    }\n  } \n\n  const addStatus = async () => {\n    if(newUID === undefined || newUID === \"\" || status === undefined || status === \"\" || borrower === undefined || borrower === \"\") {\n      alert(\"Please fill the boxes.(not include optional boxes)\")\n    } else {\n      return await fetch('/api/status', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ask: props.value, uid: newUID, status: status, borrower: borrower, note: note})\n      })\n        .then(response => response.text())\n        .then((data) => {\n                if (data === \"Nonexist\") {\n                  alert(\"UID doesn't exist. Please check again.\")\n                } else if (data === \"OK\") {\n                  upstaClose();\n                }\n              })\n    }\n  } \n\n  const addNote = async () => {\n    if(newUID === undefined || newUID === \"\" || note === undefined || note === \"\") {\n      alert(\"Please fill the boxes.\")\n    } else {\n      return await fetch('/api/note', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ask: props.value, uid: newUID, note: note})\n      })\n        .then(response => response.text())\n        .then((data) => {\n                if (data === \"Nonexist\") {\n                  alert(\"UID doesn't exist. Please check again.\")\n                } else if (data === \"OK\") {\n                  upnotClose();\n                }\n              })\n    }\n  } \n\n  const addModify = async () => {\n    if(props.value.substring(0, 3) === \"ada\" || props.value === \"legacy\") {\n      if(product_name === undefined || product_name === \"\" || family === undefined || family === \"\") {\n        alert(\"Please fill the boxes.\")\n      } else {\n        return await fetch('/api/modify', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ask: props.value, uid: uid, product: product_name, family: family})\n        })\n          .then(response => response.text())\n          .then(modifyClose())\n      }\n    } else if (props.value === \"module\" || props.value === \"AOC\" || props.value === \"DAC\") {\n      if(speed === undefined || speed === \"\" || family === undefined || family === \"\" || vendor === undefined || vendor === \"\" || product_name === undefined || product_name === \"\") {\n        alert(\"Please fill the boxes.(not include optional boxes)\")\n      } else if(distance === undefined || distance === \"\" || wavelength === undefined || wavelength === \"\"  || inter === undefined || inter === \"\") {\n        alert(\"Please fill the boxes.(not include optional boxes)\")\n      } else {\n        return await fetch('/api/modify', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ask: props.value,uid: uid, model: product_name, vendor: vendor, type: family, speed: speed, distance: distance, wavelength: wavelength, inter: inter})\n        })\n          .then(response => response.text())\n          .then(updateClose())\n      }\n    } else if(props.value === \"tools\") {\n      if(product_name === undefined || product_name === \"\") {\n        alert(\"Please fill the boxes.(not include optional boxes)\")\n      } else {\n        return await fetch('/api/modify', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ask: props.value,uid: uid, item: product_name})\n        })\n          .then(response => response.text())\n          .then(updateClose())\n      }\n    }\n  } \n\n  const UIDchange = async () => {\n    if(newUID === undefined || newUID === \"\") {\n      alert(\"Please fill the boxes.\")\n    } else {\n      return await fetch('/api/newuid', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ask: props.value, olduid: uid, newuid: newUID})\n      })\n        .then(response => response.text())\n        .then((data) => {\n                if (data === \"already\") {\n                  alert(\"New UID exists. Please check again and fill with other UID.\")\n                } else if (data === \"no\") {\n                  alert(\"UID doesn't exist. Please check again.\")\n                } else if (data === \"ok\") {\n                  upnotClose();\n                }\n              })\n    }\n  } \n  \n  useEffect(\n  () => {\n    if (!renderAfterCalled.current) {\n      fetch('/api/show', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ask: props.value})\n      })\n      .then(response => response.json())\n      .then(data => setDa(data))\n    }\n\n    renderAfterCalled.current = true;\n  }, [props]) \n\n  let showtitle = \"\";\n  let DisplayData, keys, AddDevice, UpdateStatus, UpdateNote, ModifyInfo, UpdateUID, bc, DisplayCol;\n\n  if(props.value.substring(0, 3) === \"ada\") {\n    showtitle = \"Series \"+props.value.substring(3);\n  } else if (props.value === \"legacy\") {\n    showtitle = \"Legacy/Interpose/VMC/External\";\n  } else {\n    showtitle = props.value.charAt(0).toUpperCase() + props.value.slice(1);\n  }\n\n  UpdateStatus =  <>\n                    <div className=\"add-wrapper\">\n                      <form onSubmit={addStatus}>\n                        <label>\n                          <p className=\"text\" htmlFor=\"UID\">UID</p>\n                          <input type=\"text\" onChange={e => setNewUID(e.target.value)} id=\"uid\"/>\n                        </label>\n                        <label>\n                          <p className=\"text\" htmlFor=\"Status\">Status</p>\n                          <input type=\"text\" onChange={e => setStatus(e.target.value)} id=\"status\"/>\n                        </label>\n                        <label>\n                          <p className=\"text\" htmlFor=\"Borrower\">Borrower</p>\n                          <input type=\"text\" onChange={e => setBorrower(e.target.value)} id=\"borrower\"/>\n                        </label>\n                        <label>\n                          <p className=\"text\" htmlFor=\"Note\">Note(optional)</p>\n                          <input type=\"text\" onChange={e => setNote(e.target.value)} id=\"note\"/>\n                        </label>\n                      </form>\n                    </div>\n                  </>\n\n  UpdateNote =  <>\n                  <div className=\"add-wrapper\">\n                    <form onSubmit={addNote}>\n                      <label>\n                        <p className=\"text\" htmlFor=\"UID\">UID</p>\n                        <input type=\"text\" onChange={e => setNewUID(e.target.value)} id=\"uid\"/>\n                      </label>\n                      <label>\n                        <p className=\"text\" htmlFor=\"Note\">Note</p>\n                        <input type=\"text\" onChange={e => setNote(e.target.value)} id=\"note\"/>\n                      </label>\n                    </form>\n                  </div>\n                </>\n\n  UpdateUID = <>\n                  <div className=\"add-wrapper\" style={{width: '50%', float:'left'}}>\n                    <p className=\"text\" >Old UID:</p>\n                    <p className=\"text\">{uid}</p>\n                  </div>\n                  <div className=\"add-wrapper\" style={{width: '50%', float:'right'}}>\n                    <form onSubmit={UIDchange}>\n                      <label>\n                        <p className=\"text\" htmlFor=\"New UID\">New UID:</p>\n                        <input type=\"text\" onChange={e => setNewUID(e.target.value)} id=\"new_uid\"/>\n                      </label>\n                    </form>\n                  </div>\n                </>\n\n  if(props.value.substring(0, 3) === \"ada\" || props.value === \"legacy\"){\n    AddDevice = <>\n                  <div className=\"add-wrapper\">\n                    <form onSubmit={addNew}>\n                      <label>\n                        <p className=\"text\" htmlFor=\"UID\">UID</p>\n                        <input type=\"text\" onChange={e => setNewUID(e.target.value)} id=\"uid\"/>\n                      </label>\n                      <label>\n                        <p className=\"text\" htmlFor=\"Product Name\">Product Name</p>\n                        <input type=\"text\" onChange={e => setProductName(e.target.value)} id=\"product_name\"/>\n                      </label>\n                      <label>\n                        <p className=\"text\" htmlFor=\"Family\">Family</p>\n                        <input type=\"text\" onChange={e => setFamily(e.target.value)} id=\"family\"/>\n                      </label>\n                      <label>\n                        <p className=\"text\" htmlFor=\"Location\">Location</p>\n                        <input type=\"text\" onChange={e => setLocation(e.target.value)} id=\"location\"/>\n                      </label>\n                      <label>\n                        <p className=\"text\" htmlFor=\"Status\">Status</p>\n                        <input type=\"text\" onChange={e => setStatus(e.target.value)} id=\"status\"/>\n                      </label>\n                      <label>\n                        <p className=\"text\" htmlFor=\"Borrower\">Borrower(optional)</p>\n                        <input type=\"text\" onChange={e => setBorrower(e.target.value)} id=\"borrower\"/>\n                      </label>\n                      <label>\n                        <p className=\"text\" htmlFor=\"Note\">Note(optional)</p>\n                        <input type=\"text\" onChange={e => setNote(e.target.value)} id=\"note\"/>\n                      </label>\n                    </form>\n                  </div>\n                </>\n    ModifyInfo = <>\n                    <div className=\"add-wrapper\" style={{width: '50%', float:'left'}}>\n                      <p className=\"text\" >Old Product Name:</p>\n                      <p className=\"text\">{old_product_name}</p>\n                      <br></br>\n                      <p className=\"text\" >Old Family:</p>\n                      <p className=\"text\" >{old_family}</p>\n                    </div>\n                    <div className=\"add-wrapper\" style={{width: '50%', float:'right'}}>\n                      <form onSubmit={addModify}>\n                        <label>\n                          <p className=\"text\" htmlFor=\"Product Name\">New Product Name:</p>\n                          <input type=\"text\" onChange={e => setProductName(e.target.value)} id=\"product_name\"/>\n                        </label>\n                        <label>\n                          <p className=\"text\" htmlFor=\"Family\">New Family:</p>\n                          <input type=\"text\" onChange={e => setFamily(e.target.value)} id=\"family\"/>\n                        </label>\n                      </form>\n                    </div>\n                  </>\n    \n    let cur_title = \"\";\n    if (props.value === \"legacy\") {\n      cur_title = \"Legacy\";\n    } else {\n      cur_title = \"Series \" + props.value.substring(3, 6);\n    }\n    bc = <>\n            <div className=\"bread\">\n              <Breadcrumb>\n                <Breadcrumb.Item href=\"/menu \">Menu</Breadcrumb.Item>\n                <Breadcrumb.Item href=\"/adapter \">Ethernet Network Adapter</Breadcrumb.Item>\n                <Breadcrumb.Item active>{cur_title}</Breadcrumb.Item>\n              </Breadcrumb>\n            </div>\n          </>\n  } else if(props.value === \"module\" || props.value === \"AOC\" || props.value === \"DAC\"){\n    AddDevice = <>\n                  <div className=\"add-wrapper\">\n                    <form onSubmit={addNew}>\n                      <label>\n                        <p className=\"text\" htmlFor=\"UID\">UID</p>\n                        <input type=\"text\" onChange={e => setNewUID(e.target.value)} id=\"uid\"/>\n                      </label>\n                      <label>\n                        <p className=\"text\" htmlFor=\"Model\">Model</p>\n                        <input type=\"text\" onChange={e => setProductName(e.target.value)} id=\"product_name\"/>\n                      </label>\n                      <label>\n                        <p className=\"text\" htmlFor=\"Vendor\">Vendor</p>\n                        <input type=\"text\" onChange={e => setVendor(e.target.value)} id=\"vendor\"/>\n                      </label>\n                      <label>\n                        <p className=\"text\" htmlFor=\"Type\">Type</p>\n                        <input type=\"text\" onChange={e => setFamily(e.target.value)} id=\"family\"/>\n                      </label>\n                      <label>\n                        <p className=\"text\" htmlFor=\"Speed\">Speed</p>\n                        <input type=\"text\" onChange={e => setSpeed(e.target.value)} id=\"speed\"/>\n                      </label>\n                      <label>\n                        <p className=\"text\" htmlFor=\"Distance\">Distance</p>\n                        <input type=\"text\" onChange={e => setDistance(e.target.value)} id=\"distance\"/>\n                      </label>\n                      <label>\n                        <p className=\"text\" htmlFor=\"Wavelength\">Wavelength</p>\n                        <input type=\"text\" onChange={e => setWavelength(e.target.value)} id=\"wavelength\"/>\n                      </label>\n                      <label>\n                        <p className=\"text\" htmlFor=\"Interface\">Interface</p>\n                        <input type=\"text\" onChange={e => setInterface(e.target.value)} id=\"interface\"/>\n                      </label>\n                      <label>\n                        <p className=\"text\" htmlFor=\"Location\">Location</p>\n                        <input type=\"text\" onChange={e => setLocation(e.target.value)} id=\"location\"/>\n                      </label>\n                      <label>\n                        <p className=\"text\" htmlFor=\"Status\">Status</p>\n                        <input type=\"text\" onChange={e => setStatus(e.target.value)} id=\"status\"/>\n                      </label>\n                      <label>\n                        <p className=\"text\" htmlFor=\"Borrower\">Borrower(optional)</p>\n                        <input type=\"text\" onChange={e => setBorrower(e.target.value)} id=\"borrower\"/>\n                      </label>\n                      <label>\n                        <p className=\"text\" htmlFor=\"Note\">Note(optional)</p>\n                        <input type=\"text\" onChange={e => setNote(e.target.value)} id=\"note\"/>\n                      </label>\n                    </form>\n                  </div>\n                </>\n    ModifyInfo = <>\n                    <div className=\"add-wrapper\" style={{width: '50%', float:'left'}}>\n                      <p className=\"text\" >Old Model:</p>\n                      <p className=\"text\">{old_product_name}</p>\n                      <br></br>\n                      <p className=\"text\" >Old Vendor:</p>\n                      <p className=\"text\">{old_vendor}</p>\n                      <br></br>\n                      <p className=\"text\" >Old Type:</p>\n                      <p className=\"text\" >{old_family}</p>\n                      <br></br>\n                      <p className=\"text\" >Old Speed:</p>\n                      <p className=\"text\" >{old_speed}</p>\n                      <br></br>\n                      <p className=\"text\" >Old Distance:</p>\n                      <p className=\"text\" >{old_distance}</p>\n                      <br></br>\n                      <p className=\"text\" >Old Wavelength:</p>\n                      <p className=\"text\" >{old_wavelength}</p>\n                      <br></br>\n                      <p className=\"text\" >Old Interface:</p>\n                      <p className=\"text\" >{old_inter}</p>\n                      <br></br>\n                    </div>\n                    <div className=\"add-wrapper\" style={{width: '50%', float:'right'}}>\n                      <form onSubmit={addModify}>\n                        <label>\n                          <p className=\"text\" htmlFor=\"Model\">New Model</p>\n                          <input type=\"text\" onChange={e => setProductName(e.target.value)} id=\"product_name\"/>\n                        </label>\n                        <label>\n                          <p className=\"text\" htmlFor=\"Vendor\">New Vendor</p>\n                          <input type=\"text\" onChange={e => setVendor(e.target.value)} id=\"vendor\"/>\n                        </label>\n                        <label>\n                          <p className=\"text\" htmlFor=\"Type\">New Type</p>\n                          <input type=\"text\" onChange={e => setFamily(e.target.value)} id=\"family\"/>\n                        </label>\n                        <label>\n                          <p className=\"text\" htmlFor=\"Speed\">New Speed</p>\n                          <input type=\"text\" onChange={e => setSpeed(e.target.value)} id=\"speed\"/>\n                        </label>\n                        <label>\n                          <p className=\"text\" htmlFor=\"Distance\">New Distance</p>\n                          <input type=\"text\" onChange={e => setDistance(e.target.value)} id=\"distance\"/>\n                        </label>\n                        <label>\n                          <p className=\"text\" htmlFor=\"Wavelength\">New Wavelength</p>\n                          <input type=\"text\" onChange={e => setWavelength(e.target.value)} id=\"wavelength\"/>\n                        </label>\n                        <label>\n                          <p className=\"text\" htmlFor=\"Interface\">New Interface</p>\n                          <input type=\"text\" onChange={e => setInterface(e.target.value)} id=\"interface\"/>\n                        </label>\n                      </form>\n                    </div>\n                  </>\n\n    let cur_title = \"\";\n    if (props.value === \"module\") {\n      cur_title = \"Module\";\n    } else {\n      cur_title = props.value\n    }\n    bc = <>\n            <div className=\"bread\">\n              <Breadcrumb>\n                <Breadcrumb.Item href=\"/menu \">Menu</Breadcrumb.Item>\n                <Breadcrumb.Item href=\"/module \">Module & Cable</Breadcrumb.Item>\n                <Breadcrumb.Item active>{cur_title}</Breadcrumb.Item>\n              </Breadcrumb>\n            </div>\n          </>\n  } else if(props.value === \"tools\"){\n    AddDevice = <>\n                  <div className=\"add-wrapper\">\n                    <form onSubmit={addNew}>\n                      <label>\n                        <p className=\"text\" htmlFor=\"UID\">UID</p>\n                        <input type=\"text\" onChange={e => setNewUID(e.target.value)} id=\"uid\"/>\n                      </label>\n                      <label>\n                        <p className=\"text\" htmlFor=\"Item\">Item</p>\n                        <input type=\"text\" onChange={e => setProductName(e.target.value)} id=\"product_name\"/>\n                      </label>\n                      <label>\n                        <p className=\"text\" htmlFor=\"Status\">Status</p>\n                        <input type=\"text\" onChange={e => setStatus(e.target.value)} id=\"status\"/>\n                      </label>\n                      <label>\n                        <p className=\"text\" htmlFor=\"Borrower\">Borrower(optional)</p>\n                        <input type=\"text\" onChange={e => setBorrower(e.target.value)} id=\"borrower\"/>\n                      </label>\n                      <label>\n                        <p className=\"text\" htmlFor=\"Note\">Note(optional)</p>\n                        <input type=\"text\" onChange={e => setNote(e.target.value)} id=\"note\"/>\n                      </label>\n                    </form>\n                  </div>\n                </>\n    ModifyInfo = <>\n                    <div className=\"add-wrapper\" style={{width: '50%', float:'left'}}>\n                      <p className=\"text\" >Old Item:</p>\n                      <p className=\"text\">{old_product_name}</p>\n                    </div>\n                    <div className=\"add-wrapper\" style={{width: '50%', float:'right'}}>\n                      <form onSubmit={addModify}>\n                        <label>\n                          <p className=\"text\" htmlFor=\"Product Name\">New Item:</p>\n                          <input type=\"text\" onChange={e => setProductName(e.target.value)} id=\"product_name\"/>\n                        </label>\n                      </form>\n                    </div>\n                  </>\n\n   bc = <>\n           <div className=\"bread\">\n             <Breadcrumb>\n               <Breadcrumb.Item href=\"/menu \">Menu</Breadcrumb.Item>\n               <Breadcrumb.Item active>Tools</Breadcrumb.Item>\n             </Breadcrumb>\n           </div>\n         </>\n  } \n  \n  let new_dis, status_dis, note_dis, mod_dis, uid_dis;\n  if (props.membertype === \"1\") {\n    new_dis = <><Button onClick={updateShow}>Add Device</Button></>;\n    status_dis = <><Button onClick={upstaShow}>Update Status</Button></>;\n    note_dis = <><Button onClick={upnotShow}>Update Note</Button></>;\n    mod_dis = <><Button variant=\"primary\" onClick={modifyShow}> Modify Device Info </Button></>;\n    uid_dis = <><Button variant=\"primary\" onClick={upuidShow}> Update UID </Button></>;\n  } else if (props.membertype === \"2\") {\n    new_dis = <><Button onClick={updateShow} style={{opacity:0.6}}>Add Device</Button></>;\n    status_dis = <><Button onClick={upstaShow} style={{opacity:0.6}}>Update Status</Button></>;\n    note_dis = <><Button onClick={upnotShow}>Update Note</Button></>;\n    mod_dis = <><Button variant=\"primary\" onClick={modifyShow}> Modify Device Info </Button></>;\n    uid_dis = <><Button variant=\"primary\" onClick={upuidShow} style={{opacity:0.6}}> Update UID </Button></>;\n  } else {\n    new_dis = <><Button onClick={updateShow} style={{opacity:0.6}}>Add Device</Button></>;\n    status_dis = <><Button onClick={upstaShow} style={{opacity:0.6}}>Update Status</Button></>;\n    note_dis = <><Button onClick={upnotShow} style={{opacity:0.6}}>Update Note</Button></>;\n    mod_dis = <><Button variant=\"primary\" onClick={modifyShow} style={{opacity:0.6}}> Modify Device Info </Button></>;\n    uid_dis = <><Button variant=\"primary\" onClick={upuidShow} style={{opacity:0.6}}> Update UID </Button></>;\n  }\n\n  let Pagination;\n  if (da === undefined || da.length === 0) {\n    return (\n      <div className=\"App\">\n        {bc}\n        <header className=\"App-title\">{showtitle}</header>\n        <div className=\"App-header\">\n          <h1>There is no data.</h1>\n        </div>\n      </div>\n    );\n  } else {\n    keys = Object.keys(da[0])\n    DisplayData=da.map(\n      (info, i)=>{\n          return( \n              <tr key={i} onClick={async (e)=>{handleShow(e);await fetchUID(e.target.parentElement.innerText.split('\\t')[1]);}}>\n                  {\n                  keys.map((k, idx2) => {\n                                        if (props.value === \"legacy\" && k === \"Family\") {\n                                          return <td key={idx2} style={{display:'none'}}>{info[k]}</td>;\n                                        } else {\n                                          return <td key={idx2} >{info[k]}</td>;\n                                        }\n                            })\n                  }\n              </tr>\n          )\n      }\n    )\n    DisplayCol=keys.map(k => {return { accessor: k, label: k.replaceAll(\"_\", \" \") }})\n    // DisplayCol=keys.map(column => {\n    //   return <th key={column.accessor}>{column.label}</th>\n    // })\n    DisplayCol=keys.map(k => {\n      if (props.value === \"legacy\" && k === \"Family\") {        \n        return <th key={k} style={{display:'none'}}>{k.replaceAll(\"_\", \" \")}</th>\n      } else {\n        return <th key={k}>{k.replaceAll(\"_\", \" \")}</th>;\n      }\n    })\n  }\n\n  if (inda === undefined || inda === null || inda.length === 0) {\n    return (\n        <div className=\"App\">\n          {bc}\n          <header className=\"App-title\">{showtitle}</header>\n          <div className=\"App-header\">\n            {new_dis}\n            <Modal show={update} onHide={updateClose}>\n              <Modal.Header closeButton>\n                <Modal.Title>Add Device</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                {AddDevice}\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant=\"primary\" onClick={()=>{addNew();}}>\n                  Save Changes\n                </Button>\n                <Button variant=\"secondary\" onClick={updateClose}>\n                  Close\n                </Button>\n              </Modal.Footer>\n            </Modal>\n            {status_dis}\n            <Modal show={upsta} onHide={upstaClose}>\n              <Modal.Header closeButton>\n                <Modal.Title>Update Status</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                {UpdateStatus}\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant=\"primary\" onClick={()=>{addStatus();}}>\n                  Save Changes\n                </Button>\n                <Button variant=\"secondary\" onClick={upstaClose}>\n                  Close\n                </Button>\n              </Modal.Footer>\n            </Modal>\n            {note_dis}\n            <Modal show={upnot} onHide={upnotClose}>\n              <Modal.Header closeButton>\n                <Modal.Title>Update Note</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                {UpdateNote}\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant=\"primary\" onClick={()=>{addNote();}}>\n                  Save Changes\n                </Button>\n                <Button variant=\"secondary\" onClick={upnotClose}>\n                  Close\n                </Button>\n              </Modal.Footer>\n            </Modal>\n            <table className=\"table table-light table-striped table-hover\">\n                <thead>\n                    <tr>\n                      {DisplayCol}\n                    </tr>\n                </thead>\n                <tbody>              \n                    {DisplayData}\n                </tbody>\n            </table>\n            <Modal show={ButtonPop} onHide={handleClose}>\n              <Modal.Header closeButton>\n                <Modal.Title>Detail</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                There is no Note or Borrow data about this UID. Please contact with AIMT owner to ask for help.\n              </Modal.Body>\n              <Modal.Footer>\n                {uid_dis}\n                {mod_dis}\n                <Button variant=\"secondary\" onClick={handleClose}> Close </Button>\n              </Modal.Footer>\n            </Modal>\n            <Modal show={upuid} onHide={upuidClose}>\n              <Modal.Header closeButton>\n                <Modal.Title>Update UID</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                {UpdateUID}\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant=\"primary\" onClick={UIDchange}>\n                  Save Changes\n                </Button>\n                <Button variant=\"secondary\" onClick={upuidClose}>\n                  Close\n                </Button>\n              </Modal.Footer>\n            </Modal>\n            <Modal show={modify} onHide={modifyClose}>\n              <Modal.Header closeButton>\n                <Modal.Title>Modify UID: {uid}</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                {ModifyInfo}\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant=\"primary\" onClick={addModify}>\n                  Save Changes\n                </Button>\n                <Button variant=\"secondary\" onClick={modifyClose}>\n                  Close\n                </Button>\n              </Modal.Footer>\n            </Modal>\n          </div>\n        </div>\n      );\n  } \n\n  return (\n    <div className=\"App\">\n      {bc}\n      <header className=\"App-title\">{showtitle}</header>\n      <div className=\"App-header\">\n        {new_dis}\n        <Modal show={update} onHide={updateClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Add Device</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {AddDevice}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={()=>{addNew();}}>\n              Save Changes\n            </Button>\n            <Button variant=\"secondary\" onClick={updateClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n        {status_dis}\n        <Modal show={upsta} onHide={upstaClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Update Status</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {UpdateStatus}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={()=>{addStatus();}}>\n              Save Changes\n            </Button>\n            <Button variant=\"secondary\" onClick={upstaClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n        {note_dis}\n        <Modal show={upnot} onHide={upnotClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Update Note</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {UpdateNote}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={()=>{addNote();}}>\n              Save Changes\n            </Button>\n            <Button variant=\"secondary\" onClick={upnotClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n        <table className=\"table table-light table-striped table-hover\">\n          <thead>\n            <tr>\n              {DisplayCol}\n            </tr>\n          </thead>\n          <tbody>              \n            {DisplayData}\n          </tbody>\n        </table>\n        <Modal show={ButtonPop} onHide={handleClose}  className=\"fade modal-lg\">\n          <Modal.Header closeButton>\n            <Modal.Title>{uid}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div className=\"inner-table\">\n              <table className=\"table table-light table-striped table-hover\">\n                <thead>\n                    <tr>\n                      <th>#</th>\n                      <th>UID</th>\n                      <th>Status</th>\n                      <th>Borrower</th>\n                      <th>Date</th>\n                    </tr>\n                </thead>\n                <tbody>              \n                    {inda.map(\n                      (info, i)=>{\n                          return( \n                              <tr key={i} onClick={async (e)=>{await fetchwwid(e.target.parentElement.childNodes[3].innerText);personShow(e);}} >\n                                  <td>{i}</td>\n                                  <td>{info.UID}</td>\n                                  <td>{info.Status}</td>\n                                  <td>{info.Borrower}</td>\n                                  <td>{info.Date}</td>\n                              </tr>\n                          )\n                      })\n                    }\n                </tbody>\n              </table>\n              <p>Note: {inda[0].Note}</p>\n              <Modal show={person} onHide={personClose}>\n                <Modal.Header closeButton>\n                  <Modal.Title>Borrower Information</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                  {per_info}\n                </Modal.Body>\n                <Modal.Footer>\n                  <Button variant=\"secondary\" onClick={personClose}>\n                    Close\n                  </Button>\n                </Modal.Footer>\n              </Modal>\n            </div>\n          </Modal.Body>\n          <Modal.Footer>\n            {uid_dis}\n            {mod_dis}\n            <Button variant=\"secondary\" onClick={handleClose}> Close </Button>\n          </Modal.Footer>\n        </Modal>\n        <Modal show={upuid} onHide={upuidClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Update UID</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {UpdateUID}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={UIDchange}>\n              Save Changes\n            </Button>\n            <Button variant=\"secondary\" onClick={upuidClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n        <Modal show={modify} onHide={modifyClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Modify UID: {uid}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {ModifyInfo}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={addModify}>\n              Save Changes\n            </Button>\n            <Button variant=\"secondary\" onClick={modifyClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    </div>\n  );\n  \n}\n",{"ruleId":"188","severity":1,"message":"189","line":2,"column":8,"nodeType":"190","messageId":"191","endLine":2,"endColumn":18},{"ruleId":"188","severity":1,"message":"192","line":4,"column":20,"nodeType":"190","messageId":"191","endLine":4,"endColumn":29},{"ruleId":"188","severity":1,"message":"193","line":7,"column":7,"nodeType":"190","messageId":"191","endLine":7,"endColumn":22},{"ruleId":"188","severity":1,"message":"194","line":8,"column":9,"nodeType":"190","messageId":"191","endLine":8,"endColumn":26},{"ruleId":"195","severity":2,"message":"196","line":528,"column":16,"nodeType":"190","messageId":"197","endLine":528,"endColumn":25},{"ruleId":"188","severity":1,"message":"198","line":669,"column":7,"nodeType":"190","messageId":"191","endLine":669,"endColumn":17},"no-unused-vars","'Breadcrumb' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useSortableData' is assigned a value but never used.","'renderAfterCalled' is assigned a value but never used.","no-undef","'SortTable' is not defined.","undef","'Pagination' is defined but never used."]