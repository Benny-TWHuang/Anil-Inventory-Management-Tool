{"ast":null,"code":"/**\n * table-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n// Is this type a tuple?\n\n// If this type is a tuple, what indices are allowed?\n\n///\n\nfunction functionalUpdate(updater, input) {\n  return typeof updater === 'function' ? updater(input) : updater;\n}\nfunction noop() {\n  //\n}\nfunction makeStateUpdater(key, instance) {\n  return updater => {\n    instance.setState(old => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, old[key])\n      };\n    });\n  };\n}\nfunction isFunction(d) {\n  return d instanceof Function;\n}\nfunction flattenBy(arr, getChildren) {\n  const flat = [];\n  const recurse = subArr => {\n    subArr.forEach(item => {\n      flat.push(item);\n      const children = getChildren(item);\n      if (children != null && children.length) {\n        recurse(children);\n      }\n    });\n  };\n  recurse(arr);\n  return flat;\n}\nfunction memo(getDeps, fn, opts) {\n  let deps = [];\n  let result;\n  return () => {\n    let depTime;\n    if (opts.key && opts.debug) depTime = Date.now();\n    const newDeps = getDeps();\n    const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index) => deps[index] !== dep);\n    if (!depsChanged) {\n      return result;\n    }\n    deps = newDeps;\n    let resultTime;\n    if (opts.key && opts.debug) resultTime = Date.now();\n    result = fn(...newDeps);\n    opts == null ? void 0 : opts.onChange == null ? void 0 : opts.onChange(result);\n    if (opts.key && opts.debug) {\n      if (opts != null && opts.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime) * 100) / 100;\n        const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;\n        const resultFpsPercentage = resultEndTime / 16;\n        const pad = (str, num) => {\n          str = String(str);\n          while (str.length < num) {\n            str = ' ' + str;\n          }\n          return str;\n        };\n        console.info(`%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`, `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120))}deg 100% 31%);`, opts == null ? void 0 : opts.key);\n      }\n    }\n    return result;\n  };\n}\nfunction createColumn(table, columnDef, depth, parent) {\n  var _ref, _resolvedColumnDef$id;\n  const defaultColumn = table._getDefaultColumnDef();\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef\n  };\n  const accessorKey = resolvedColumnDef.accessorKey;\n  let id = (_ref = (_resolvedColumnDef$id = resolvedColumnDef.id) != null ? _resolvedColumnDef$id : accessorKey ? accessorKey.replace('.', '_') : undefined) != null ? _ref : typeof resolvedColumnDef.header === 'string' ? resolvedColumnDef.header : undefined;\n  let accessorFn;\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn;\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = originalRow => {\n        let result = originalRow;\n        for (const key of accessorKey.split('.')) {\n          var _result;\n          result = (_result = result) == null ? void 0 : _result[key];\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(`\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`);\n          }\n        }\n        return result;\n      };\n    } else {\n      accessorFn = originalRow => originalRow[resolvedColumnDef.accessorKey];\n    }\n  }\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(resolvedColumnDef.accessorFn ? `Columns require an id when using an accessorFn` : `Columns require an id when using a non-string header`);\n    }\n    throw new Error();\n  }\n  let column = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent,\n    depth,\n    columnDef: resolvedColumnDef,\n    columns: [],\n    getFlatColumns: memo(() => [true], () => {\n      var _column$columns;\n      return [column, ...((_column$columns = column.columns) == null ? void 0 : _column$columns.flatMap(d => d.getFlatColumns()))];\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugColumns;\n      }\n    }),\n    getLeafColumns: memo(() => [table._getOrderColumnsFn()], orderColumns => {\n      var _column$columns2;\n      if ((_column$columns2 = column.columns) != null && _column$columns2.length) {\n        let leafColumns = column.columns.flatMap(column => column.getLeafColumns());\n        return orderColumns(leafColumns);\n      }\n      return [column];\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n      debug: () => {\n        var _table$options$debugA2;\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugColumns;\n      }\n    })\n  };\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn == null ? void 0 : feature.createColumn(column, table));\n  }, column);\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column;\n}\n\n//\n\nfunction createHeader(table, column, options) {\n  var _options$id;\n  const id = (_options$id = options.id) != null ? _options$id : column.id;\n  let header = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null,\n    getLeafHeaders: () => {\n      const leafHeaders = [];\n      const recurseHeader = h => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader);\n        }\n        leafHeaders.push(h);\n      };\n      recurseHeader(header);\n      return leafHeaders;\n    },\n    getContext: () => ({\n      table,\n      header: header,\n      column\n    })\n  };\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader == null ? void 0 : feature.createHeader(header, table));\n  });\n  return header;\n}\nconst Headers = {\n  createTable: table => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n        var _left$map$filter, _right$map$filter;\n        const leftColumns = (_left$map$filter = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter : [];\n        const rightColumns = (_right$map$filter = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter : [];\n        const centerColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n        const headerGroups = buildHeaderGroups(allColumns, [...leftColumns, ...centerColumns, ...rightColumns], table);\n        return headerGroups;\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugHeaders;\n        }\n      }),\n      getCenterHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n        leafColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n        return buildHeaderGroups(allColumns, leafColumns, table, 'center');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n        debug: () => {\n          var _table$options$debugA2;\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugHeaders;\n        }\n      }),\n      getLeftHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left], (allColumns, leafColumns, left) => {\n        var _left$map$filter2;\n        const orderedLeafColumns = (_left$map$filter2 = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter2 : [];\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n        debug: () => {\n          var _table$options$debugA3;\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugHeaders;\n        }\n      }),\n      getRightHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.right], (allColumns, leafColumns, right) => {\n        var _right$map$filter2;\n        const orderedLeafColumns = (_right$map$filter2 = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter2 : [];\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n        debug: () => {\n          var _table$options$debugA4;\n          return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugHeaders;\n        }\n      }),\n      // Footer Groups\n\n      getFooterGroups: memo(() => [table.getHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n        debug: () => {\n          var _table$options$debugA5;\n          return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugHeaders;\n        }\n      }),\n      getLeftFooterGroups: memo(() => [table.getLeftHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n        debug: () => {\n          var _table$options$debugA6;\n          return (_table$options$debugA6 = table.options.debugAll) != null ? _table$options$debugA6 : table.options.debugHeaders;\n        }\n      }),\n      getCenterFooterGroups: memo(() => [table.getCenterHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n        debug: () => {\n          var _table$options$debugA7;\n          return (_table$options$debugA7 = table.options.debugAll) != null ? _table$options$debugA7 : table.options.debugHeaders;\n        }\n      }),\n      getRightFooterGroups: memo(() => [table.getRightHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n        debug: () => {\n          var _table$options$debugA8;\n          return (_table$options$debugA8 = table.options.debugAll) != null ? _table$options$debugA8 : table.options.debugHeaders;\n        }\n      }),\n      // Flat Headers\n\n      getFlatHeaders: memo(() => [table.getHeaderGroups()], headerGroups => {\n        return headerGroups.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n        debug: () => {\n          var _table$options$debugA9;\n          return (_table$options$debugA9 = table.options.debugAll) != null ? _table$options$debugA9 : table.options.debugHeaders;\n        }\n      }),\n      getLeftFlatHeaders: memo(() => [table.getLeftHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n        debug: () => {\n          var _table$options$debugA10;\n          return (_table$options$debugA10 = table.options.debugAll) != null ? _table$options$debugA10 : table.options.debugHeaders;\n        }\n      }),\n      getCenterFlatHeaders: memo(() => [table.getCenterHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n        debug: () => {\n          var _table$options$debugA11;\n          return (_table$options$debugA11 = table.options.debugAll) != null ? _table$options$debugA11 : table.options.debugHeaders;\n        }\n      }),\n      getRightFlatHeaders: memo(() => [table.getRightHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n        debug: () => {\n          var _table$options$debugA12;\n          return (_table$options$debugA12 = table.options.debugAll) != null ? _table$options$debugA12 : table.options.debugHeaders;\n        }\n      }),\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(() => [table.getCenterFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => {\n          var _header$subHeaders;\n          return !((_header$subHeaders = header.subHeaders) != null && _header$subHeaders.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n        debug: () => {\n          var _table$options$debugA13;\n          return (_table$options$debugA13 = table.options.debugAll) != null ? _table$options$debugA13 : table.options.debugHeaders;\n        }\n      }),\n      getLeftLeafHeaders: memo(() => [table.getLeftFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => {\n          var _header$subHeaders2;\n          return !((_header$subHeaders2 = header.subHeaders) != null && _header$subHeaders2.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n        debug: () => {\n          var _table$options$debugA14;\n          return (_table$options$debugA14 = table.options.debugAll) != null ? _table$options$debugA14 : table.options.debugHeaders;\n        }\n      }),\n      getRightLeafHeaders: memo(() => [table.getRightFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => {\n          var _header$subHeaders3;\n          return !((_header$subHeaders3 = header.subHeaders) != null && _header$subHeaders3.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n        debug: () => {\n          var _table$options$debugA15;\n          return (_table$options$debugA15 = table.options.debugAll) != null ? _table$options$debugA15 : table.options.debugHeaders;\n        }\n      }),\n      getLeafHeaders: memo(() => [table.getLeftHeaderGroups(), table.getCenterHeaderGroups(), table.getRightHeaderGroups()], (left, center, right) => {\n        var _left$0$headers, _left$, _center$0$headers, _center$, _right$0$headers, _right$;\n        return [...((_left$0$headers = (_left$ = left[0]) == null ? void 0 : _left$.headers) != null ? _left$0$headers : []), ...((_center$0$headers = (_center$ = center[0]) == null ? void 0 : _center$.headers) != null ? _center$0$headers : []), ...((_right$0$headers = (_right$ = right[0]) == null ? void 0 : _right$.headers) != null ? _right$0$headers : [])].map(header => {\n          return header.getLeafHeaders();\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n        debug: () => {\n          var _table$options$debugA16;\n          return (_table$options$debugA16 = table.options.debugAll) != null ? _table$options$debugA16 : table.options.debugHeaders;\n        }\n      })\n    };\n  }\n};\nfunction buildHeaderGroups(allColumns, columnsToGroup, table, headerFamily) {\n  var _headerGroups$0$heade, _headerGroups$;\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0;\n  const findMaxDepth = function (columns, depth) {\n    if (depth === void 0) {\n      depth = 1;\n    }\n    maxDepth = Math.max(maxDepth, depth);\n    columns.filter(column => column.getIsVisible()).forEach(column => {\n      var _column$columns;\n      if ((_column$columns = column.columns) != null && _column$columns.length) {\n        findMaxDepth(column.columns, depth + 1);\n      }\n    }, 0);\n  };\n  findMaxDepth(allColumns);\n  let headerGroups = [];\n  const createHeaderGroup = (headersToGroup, depth) => {\n    // The header group we are creating\n    const headerGroup = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: []\n    };\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders = [];\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0];\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth;\n      let column;\n      let isPlaceholder = false;\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent;\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column;\n        isPlaceholder = true;\n      }\n      if (latestPendingParentHeader && (latestPendingParentHeader == null ? void 0 : latestPendingParentHeader.column) === column) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup);\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup == null ? void 0 : headerToGroup.id].filter(Boolean).join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder ? `${pendingParentHeaders.filter(d => d.column === column).length}` : undefined,\n          depth,\n          index: pendingParentHeaders.length\n        });\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup);\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header);\n      }\n      headerGroup.headers.push(headerToGroup);\n      headerToGroup.headerGroup = headerGroup;\n    });\n    headerGroups.push(headerGroup);\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1);\n    }\n  };\n  const bottomHeaders = columnsToGroup.map((column, index) => createHeader(table, column, {\n    depth: maxDepth,\n    index\n  }));\n  createHeaderGroup(bottomHeaders, maxDepth - 1);\n  headerGroups.reverse();\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = headers => {\n    const filteredHeaders = headers.filter(header => header.column.getIsVisible());\n    return filteredHeaders.map(header => {\n      let colSpan = 0;\n      let rowSpan = 0;\n      let childRowSpans = [0];\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = [];\n        recurseHeadersForSpans(header.subHeaders).forEach(_ref => {\n          let {\n            colSpan: childColSpan,\n            rowSpan: childRowSpan\n          } = _ref;\n          colSpan += childColSpan;\n          childRowSpans.push(childRowSpan);\n        });\n      } else {\n        colSpan = 1;\n      }\n      const minChildRowSpan = Math.min(...childRowSpans);\n      rowSpan = rowSpan + minChildRowSpan;\n      header.colSpan = colSpan;\n      header.rowSpan = rowSpan;\n      return {\n        colSpan,\n        rowSpan\n      };\n    });\n  };\n  recurseHeadersForSpans((_headerGroups$0$heade = (_headerGroups$ = headerGroups[0]) == null ? void 0 : _headerGroups$.headers) != null ? _headerGroups$0$heade : []);\n  return headerGroups;\n}\n\n//\n\n//\n\nconst defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER\n};\nconst getDefaultColumnSizingInfoState = () => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: []\n});\nconst ColumnSizing = {\n  getDefaultColumnDef: () => {\n    return defaultColumnSizing;\n  },\n  getInitialState: state => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getSize: () => {\n        var _column$columnDef$min, _ref, _column$columnDef$max;\n        const columnSize = table.getState().columnSizing[column.id];\n        return Math.min(Math.max((_column$columnDef$min = column.columnDef.minSize) != null ? _column$columnDef$min : defaultColumnSizing.minSize, (_ref = columnSize != null ? columnSize : column.columnDef.size) != null ? _ref : defaultColumnSizing.size), (_column$columnDef$max = column.columnDef.maxSize) != null ? _column$columnDef$max : defaultColumnSizing.maxSize);\n      },\n      getStart: position => {\n        const columns = !position ? table.getVisibleLeafColumns() : position === 'left' ? table.getLeftVisibleLeafColumns() : table.getRightVisibleLeafColumns();\n        const index = columns.findIndex(d => d.id === column.id);\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1];\n          return prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize();\n        }\n        return 0;\n      },\n      resetSize: () => {\n        table.setColumnSizing(_ref2 => {\n          let {\n            [column.id]: _,\n            ...rest\n          } = _ref2;\n          return rest;\n        });\n      },\n      getCanResize: () => {\n        var _column$columnDef$ena, _table$options$enable;\n        return ((_column$columnDef$ena = column.columnDef.enableResizing) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnResizing) != null ? _table$options$enable : true);\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id;\n      }\n    };\n  },\n  createHeader: (header, table) => {\n    return {\n      getSize: () => {\n        let sum = 0;\n        const recurse = header => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse);\n          } else {\n            var _header$column$getSiz;\n            sum += (_header$column$getSiz = header.column.getSize()) != null ? _header$column$getSiz : 0;\n          }\n        };\n        recurse(header);\n        return sum;\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader = header.headerGroup.headers[header.index - 1];\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize();\n        }\n        return 0;\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id);\n        const canResize = column == null ? void 0 : column.getCanResize();\n        return e => {\n          if (!column || !canResize) {\n            return;\n          }\n          e.persist == null ? void 0 : e.persist();\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return;\n            }\n          }\n          const startSize = header.getSize();\n          const columnSizingStart = header ? header.getLeafHeaders().map(d => [d.column.id, d.column.getSize()]) : [[column.id, column.getSize()]];\n          const clientX = isTouchStartEvent(e) ? Math.round(e.touches[0].clientX) : e.clientX;\n          const newColumnSizing = {};\n          const updateOffset = (eventType, clientXPos) => {\n            if (typeof clientXPos !== 'number') {\n              return;\n            }\n            table.setColumnSizingInfo(old => {\n              var _old$startOffset, _old$startSize;\n              const deltaOffset = clientXPos - ((_old$startOffset = old == null ? void 0 : old.startOffset) != null ? _old$startOffset : 0);\n              const deltaPercentage = Math.max(deltaOffset / ((_old$startSize = old == null ? void 0 : old.startSize) != null ? _old$startSize : 0), -0.999999);\n              old.columnSizingStart.forEach(_ref3 => {\n                let [columnId, headerSize] = _ref3;\n                newColumnSizing[columnId] = Math.round(Math.max(headerSize + headerSize * deltaPercentage, 0) * 100) / 100;\n              });\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage\n              };\n            });\n            if (table.options.columnResizeMode === 'onChange' || eventType === 'end') {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing\n              }));\n            }\n          };\n          const onMove = clientXPos => updateOffset('move', clientXPos);\n          const onEnd = clientXPos => {\n            updateOffset('end', clientXPos);\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: []\n            }));\n          };\n          const mouseEvents = {\n            moveHandler: e => onMove(e.clientX),\n            upHandler: e => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler);\n              document.removeEventListener('mouseup', mouseEvents.upHandler);\n              onEnd(e.clientX);\n            }\n          };\n          const touchEvents = {\n            moveHandler: e => {\n              if (e.cancelable) {\n                e.preventDefault();\n                e.stopPropagation();\n              }\n              onMove(e.touches[0].clientX);\n              return false;\n            },\n            upHandler: e => {\n              var _e$touches$;\n              document.removeEventListener('touchmove', touchEvents.moveHandler);\n              document.removeEventListener('touchend', touchEvents.upHandler);\n              if (e.cancelable) {\n                e.preventDefault();\n                e.stopPropagation();\n              }\n              onEnd((_e$touches$ = e.touches[0]) == null ? void 0 : _e$touches$.clientX);\n            }\n          };\n          const passiveIfSupported = passiveEventSupported() ? {\n            passive: false\n          } : false;\n          if (isTouchStartEvent(e)) {\n            document.addEventListener('touchmove', touchEvents.moveHandler, passiveIfSupported);\n            document.addEventListener('touchend', touchEvents.upHandler, passiveIfSupported);\n          } else {\n            document.addEventListener('mousemove', mouseEvents.moveHandler, passiveIfSupported);\n            document.addEventListener('mouseup', mouseEvents.upHandler, passiveIfSupported);\n          }\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id\n          }));\n        };\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange == null ? void 0 : table.options.onColumnSizingChange(updater),\n      setColumnSizingInfo: updater => table.options.onColumnSizingInfoChange == null ? void 0 : table.options.onColumnSizingInfoChange(updater),\n      resetColumnSizing: defaultState => {\n        var _table$initialState$c;\n        table.setColumnSizing(defaultState ? {} : (_table$initialState$c = table.initialState.columnSizing) != null ? _table$initialState$c : {});\n      },\n      resetHeaderSizeInfo: defaultState => {\n        var _table$initialState$c2;\n        table.setColumnSizingInfo(defaultState ? getDefaultColumnSizingInfoState() : (_table$initialState$c2 = table.initialState.columnSizingInfo) != null ? _table$initialState$c2 : getDefaultColumnSizingInfoState());\n      },\n      getTotalSize: () => {\n        var _table$getHeaderGroup, _table$getHeaderGroup2;\n        return (_table$getHeaderGroup = (_table$getHeaderGroup2 = table.getHeaderGroups()[0]) == null ? void 0 : _table$getHeaderGroup2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getHeaderGroup : 0;\n      },\n      getLeftTotalSize: () => {\n        var _table$getLeftHeaderG, _table$getLeftHeaderG2;\n        return (_table$getLeftHeaderG = (_table$getLeftHeaderG2 = table.getLeftHeaderGroups()[0]) == null ? void 0 : _table$getLeftHeaderG2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getLeftHeaderG : 0;\n      },\n      getCenterTotalSize: () => {\n        var _table$getCenterHeade, _table$getCenterHeade2;\n        return (_table$getCenterHeade = (_table$getCenterHeade2 = table.getCenterHeaderGroups()[0]) == null ? void 0 : _table$getCenterHeade2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getCenterHeade : 0;\n      },\n      getRightTotalSize: () => {\n        var _table$getRightHeader, _table$getRightHeader2;\n        return (_table$getRightHeader = (_table$getRightHeader2 = table.getRightHeaderGroups()[0]) == null ? void 0 : _table$getRightHeader2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getRightHeader : 0;\n      }\n    };\n  }\n};\nlet passiveSupported = null;\nfunction passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported;\n  let supported = false;\n  try {\n    const options = {\n      get passive() {\n        supported = true;\n        return false;\n      }\n    };\n    const noop = () => {};\n    window.addEventListener('test', noop, options);\n    window.removeEventListener('test', noop);\n  } catch (err) {\n    supported = false;\n  }\n  passiveSupported = supported;\n  return passiveSupported;\n}\nfunction isTouchStartEvent(e) {\n  return e.type === 'touchstart';\n}\n\n//\n\nconst Expanding = {\n  getInitialState: state => {\n    return {\n      expanded: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    return {\n      _autoResetExpanded: () => {\n        var _ref, _table$options$autoRe;\n        if (!registered) {\n          table._queue(() => {\n            registered = true;\n          });\n          return;\n        }\n        if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetExpanded) != null ? _ref : !table.options.manualExpanding) {\n          if (queued) return;\n          queued = true;\n          table._queue(() => {\n            table.resetExpanded();\n            queued = false;\n          });\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange == null ? void 0 : table.options.onExpandedChange(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded != null ? expanded : !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true);\n        } else {\n          table.setExpanded({});\n        }\n      },\n      resetExpanded: defaultState => {\n        var _table$initialState$e, _table$initialState;\n        table.setExpanded(defaultState ? {} : (_table$initialState$e = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.expanded) != null ? _table$initialState$e : {});\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getPrePaginationRowModel().flatRows.some(row => row.getCanExpand());\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return e => {\n          e.persist == null ? void 0 : e.persist();\n          table.toggleAllRowsExpanded();\n        };\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded;\n        return expanded === true || Object.values(expanded).some(Boolean);\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded;\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true;\n        }\n        if (!Object.keys(expanded).length) {\n          return false;\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false;\n        }\n\n        // They must all be expanded :shrug:\n        return true;\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0;\n        const rowIds = table.getState().expanded === true ? Object.keys(table.getRowModel().rowsById) : Object.keys(table.getState().expanded);\n        rowIds.forEach(id => {\n          const splitId = id.split('.');\n          maxDepth = Math.max(maxDepth, splitId.length);\n        });\n        return maxDepth;\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table);\n        }\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel();\n        }\n        return table._getExpandedRowModel();\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          var _expanded;\n          const exists = old === true ? true : !!(old != null && old[row.id]);\n          let oldExpanded = {};\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true;\n            });\n          } else {\n            oldExpanded = old;\n          }\n          expanded = (_expanded = expanded) != null ? _expanded : !exists;\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true\n            };\n          }\n          if (exists && !expanded) {\n            const {\n              [row.id]: _,\n              ...rest\n            } = oldExpanded;\n            return rest;\n          }\n          return old;\n        });\n      },\n      getIsExpanded: () => {\n        var _table$options$getIsR;\n        const expanded = table.getState().expanded;\n        return !!((_table$options$getIsR = table.options.getIsRowExpanded == null ? void 0 : table.options.getIsRowExpanded(row)) != null ? _table$options$getIsR : expanded === true || (expanded == null ? void 0 : expanded[row.id]));\n      },\n      getCanExpand: () => {\n        var _table$options$getRow, _table$options$enable, _row$subRows;\n        return (_table$options$getRow = table.options.getRowCanExpand == null ? void 0 : table.options.getRowCanExpand(row)) != null ? _table$options$getRow : ((_table$options$enable = table.options.enableExpanding) != null ? _table$options$enable : true) && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand();\n        return () => {\n          if (!canExpand) return;\n          row.toggleExpanded();\n        };\n      }\n    };\n  }\n};\nconst includesString = (row, columnId, filterValue) => {\n  var _row$getValue, _row$getValue$toStrin, _row$getValue$toStrin2;\n  const search = filterValue.toLowerCase();\n  return Boolean((_row$getValue = row.getValue(columnId)) == null ? void 0 : (_row$getValue$toStrin = _row$getValue.toString()) == null ? void 0 : (_row$getValue$toStrin2 = _row$getValue$toStrin.toLowerCase()) == null ? void 0 : _row$getValue$toStrin2.includes(search));\n};\nincludesString.autoRemove = val => testFalsey(val);\nconst includesStringSensitive = (row, columnId, filterValue) => {\n  var _row$getValue2, _row$getValue2$toStri;\n  return Boolean((_row$getValue2 = row.getValue(columnId)) == null ? void 0 : (_row$getValue2$toStri = _row$getValue2.toString()) == null ? void 0 : _row$getValue2$toStri.includes(filterValue));\n};\nincludesStringSensitive.autoRemove = val => testFalsey(val);\nconst equalsString = (row, columnId, filterValue) => {\n  var _row$getValue3, _row$getValue3$toStri;\n  return ((_row$getValue3 = row.getValue(columnId)) == null ? void 0 : (_row$getValue3$toStri = _row$getValue3.toString()) == null ? void 0 : _row$getValue3$toStri.toLowerCase()) === (filterValue == null ? void 0 : filterValue.toLowerCase());\n};\nequalsString.autoRemove = val => testFalsey(val);\nconst arrIncludes = (row, columnId, filterValue) => {\n  var _row$getValue4;\n  return (_row$getValue4 = row.getValue(columnId)) == null ? void 0 : _row$getValue4.includes(filterValue);\n};\narrIncludes.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst arrIncludesAll = (row, columnId, filterValue) => {\n  return !filterValue.some(val => {\n    var _row$getValue5;\n    return !((_row$getValue5 = row.getValue(columnId)) != null && _row$getValue5.includes(val));\n  });\n};\narrIncludesAll.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst arrIncludesSome = (row, columnId, filterValue) => {\n  return filterValue.some(val => {\n    var _row$getValue6;\n    return (_row$getValue6 = row.getValue(columnId)) == null ? void 0 : _row$getValue6.includes(val);\n  });\n};\narrIncludesSome.autoRemove = val => testFalsey(val) || !(val != null && val.length);\nconst equals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) === filterValue;\n};\nequals.autoRemove = val => testFalsey(val);\nconst weakEquals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) == filterValue;\n};\nweakEquals.autoRemove = val => testFalsey(val);\nconst inNumberRange = (row, columnId, filterValue) => {\n  let [min, max] = filterValue;\n  const rowValue = row.getValue(columnId);\n  return rowValue >= min && rowValue <= max;\n};\ninNumberRange.resolveFilterValue = val => {\n  let [unsafeMin, unsafeMax] = val;\n  let parsedMin = typeof unsafeMin !== 'number' ? parseFloat(unsafeMin) : unsafeMin;\n  let parsedMax = typeof unsafeMax !== 'number' ? parseFloat(unsafeMax) : unsafeMax;\n  let min = unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin;\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax;\n  if (min > max) {\n    const temp = min;\n    min = max;\n    max = temp;\n  }\n  return [min, max];\n};\ninNumberRange.autoRemove = val => testFalsey(val) || testFalsey(val[0]) && testFalsey(val[1]);\n\n// Export\n\nconst filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange\n};\n// Utils\n\nfunction testFalsey(val) {\n  return val === undefined || val === null || val === '';\n}\n\n//\n\nconst Filters = {\n  getDefaultColumnDef: () => {\n    return {\n      filterFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        var _table$getCoreRowMode, _table$getCoreRowMode2;\n        const value = (_table$getCoreRowMode = table.getCoreRowModel().flatRows[0]) == null ? void 0 : (_table$getCoreRowMode2 = _table$getCoreRowMode._getAllCellsByColumnId()[column.id]) == null ? void 0 : _table$getCoreRowMode2.getValue();\n        return typeof value === 'string' || typeof value === 'number';\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0];\n        const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n        if (typeof value === 'string') {\n          return filterFns.includesString;\n        }\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange;\n        }\n        if (typeof value === 'boolean') {\n          return filterFns.equals;\n        }\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals;\n        }\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes;\n        }\n        return filterFns.weakEquals;\n      },\n      getFilterFn: () => {\n        var _table$options$filter, _table$options$filter2;\n        return isFunction(column.columnDef.filterFn) ? column.columnDef.filterFn : column.columnDef.filterFn === 'auto' ? column.getAutoFilterFn()\n        // @ts-ignore \n        : (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[column.columnDef.filterFn]) != null ? _table$options$filter : filterFns[column.columnDef.filterFn];\n      },\n      getCanFilter: () => {\n        var _column$columnDef$ena, _table$options$enable, _table$options$enable2;\n        return ((_column$columnDef$ena = column.columnDef.enableColumnFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnFilters) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && !!column.accessorFn;\n      },\n      getCanGlobalFilter: () => {\n        var _column$columnDef$ena2, _table$options$enable3, _table$options$enable4, _table$options$getCol;\n        return ((_column$columnDef$ena2 = column.columnDef.enableGlobalFilter) != null ? _column$columnDef$ena2 : true) && ((_table$options$enable3 = table.options.enableGlobalFilter) != null ? _table$options$enable3 : true) && ((_table$options$enable4 = table.options.enableFilters) != null ? _table$options$enable4 : true) && ((_table$options$getCol = table.options.getColumnCanGlobalFilter == null ? void 0 : table.options.getColumnCanGlobalFilter(column)) != null ? _table$options$getCol : true) && !!column.accessorFn;\n      },\n      getIsFiltered: () => column.getFilterIndex() > -1,\n      getFilterValue: () => {\n        var _table$getState$colum, _table$getState$colum2;\n        return (_table$getState$colum = table.getState().columnFilters) == null ? void 0 : (_table$getState$colum2 = _table$getState$colum.find(d => d.id === column.id)) == null ? void 0 : _table$getState$colum2.value;\n      },\n      getFilterIndex: () => {\n        var _table$getState$colum3, _table$getState$colum4;\n        return (_table$getState$colum3 = (_table$getState$colum4 = table.getState().columnFilters) == null ? void 0 : _table$getState$colum4.findIndex(d => d.id === column.id)) != null ? _table$getState$colum3 : -1;\n      },\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn();\n          const previousfilter = old == null ? void 0 : old.find(d => d.id === column.id);\n          const newFilter = functionalUpdate(value, previousfilter ? previousfilter.value : undefined);\n\n          //\n          if (shouldAutoRemoveFilter(filterFn, newFilter, column)) {\n            var _old$filter;\n            return (_old$filter = old == null ? void 0 : old.filter(d => d.id !== column.id)) != null ? _old$filter : [];\n          }\n          const newFilterObj = {\n            id: column.id,\n            value: newFilter\n          };\n          if (previousfilter) {\n            var _old$map;\n            return (_old$map = old == null ? void 0 : old.map(d => {\n              if (d.id === column.id) {\n                return newFilterObj;\n              }\n              return d;\n            })) != null ? _old$map : [];\n          }\n          if (old != null && old.length) {\n            return [...old, newFilterObj];\n          }\n          return [newFilterObj];\n        });\n      },\n      _getFacetedRowModel: table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n        return column._getFacetedRowModel();\n      },\n      _getFacetedUniqueValues: table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map();\n        }\n        return column._getFacetedUniqueValues();\n      },\n      _getFacetedMinMaxValues: table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined;\n        }\n        return column._getFacetedMinMaxValues();\n      }\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    };\n  },\n\n  createRow: (row, table) => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {}\n    };\n  },\n  createTable: table => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString;\n      },\n      getGlobalFilterFn: () => {\n        var _table$options$filter3, _table$options$filter4;\n        const {\n          globalFilterFn: globalFilterFn\n        } = table.options;\n        return isFunction(globalFilterFn) ? globalFilterFn : globalFilterFn === 'auto' ? table.getGlobalAutoFilterFn()\n        // @ts-ignore\n        : (_table$options$filter3 = (_table$options$filter4 = table.options.filterFns) == null ? void 0 : _table$options$filter4[globalFilterFn]) != null ? _table$options$filter3 : filterFns[globalFilterFn];\n      },\n      setColumnFilters: updater => {\n        const leafColumns = table.getAllLeafColumns();\n        const updateFn = old => {\n          var _functionalUpdate;\n          return (_functionalUpdate = functionalUpdate(updater, old)) == null ? void 0 : _functionalUpdate.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id);\n            if (column) {\n              const filterFn = column.getFilterFn();\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false;\n              }\n            }\n            return true;\n          });\n        };\n        table.options.onColumnFiltersChange == null ? void 0 : table.options.onColumnFiltersChange(updateFn);\n      },\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange == null ? void 0 : table.options.onGlobalFilterChange(updater);\n      },\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(defaultState ? undefined : table.initialState.globalFilter);\n      },\n      resetColumnFilters: defaultState => {\n        var _table$initialState$c, _table$initialState;\n        table.setColumnFilters(defaultState ? [] : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnFilters) != null ? _table$initialState$c : []);\n      },\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table);\n        }\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n        return table._getFilteredRowModel();\n      },\n      _getGlobalFacetedRowModel: table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, '__global__'),\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n        return table._getGlobalFacetedRowModel();\n      },\n      _getGlobalFacetedUniqueValues: table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map();\n        }\n        return table._getGlobalFacetedUniqueValues();\n      },\n      _getGlobalFacetedMinMaxValues: table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return;\n        }\n        return table._getGlobalFacetedMinMaxValues();\n      }\n    };\n  }\n};\nfunction shouldAutoRemoveFilter(filterFn, value, column) {\n  return (filterFn && filterFn.autoRemove ? filterFn.autoRemove(value, column) : false) || typeof value === 'undefined' || typeof value === 'string' && !value;\n}\nconst sum = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId);\n    return sum + (typeof nextValue === 'number' ? nextValue : 0);\n  }, 0);\n};\nconst min = (columnId, _leafRows, childRows) => {\n  let min;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (min > value || min === undefined && value >= value)) {\n      min = value;\n    }\n  });\n  return min;\n};\nconst max = (columnId, _leafRows, childRows) => {\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (max < value || max === undefined && value >= value)) {\n      max = value;\n    }\n  });\n  return max;\n};\nconst extent = (columnId, _leafRows, childRows) => {\n  let min;\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value;\n      } else {\n        if (min > value) min = value;\n        if (max < value) max = value;\n      }\n    }\n  });\n  return [min, max];\n};\nconst mean = (columnId, leafRows) => {\n  let count = 0;\n  let sum = 0;\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId);\n    if (value != null && (value = +value) >= value) {\n      ++count, sum += value;\n    }\n  });\n  if (count) return sum / count;\n  return;\n};\nconst median = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return;\n  }\n  let min = 0;\n  let max = 0;\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId);\n    if (typeof value === 'number') {\n      min = Math.min(min, value);\n      max = Math.max(max, value);\n    }\n  });\n  return (min + max) / 2;\n};\nconst unique = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values());\n};\nconst uniqueCount = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size;\n};\nconst count = (_columnId, leafRows) => {\n  return leafRows.length;\n};\nconst aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count\n};\n\n//\n\nconst Grouping = {\n  getDefaultColumnDef: () => {\n    return {\n      aggregatedCell: props => {\n        var _toString, _props$getValue;\n        return (_toString = (_props$getValue = props.getValue()) == null ? void 0 : _props$getValue.toString == null ? void 0 : _props$getValue.toString()) != null ? _toString : null;\n      },\n      aggregationFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      grouping: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder'\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old != null && old.includes(column.id)) {\n            return old.filter(d => d !== column.id);\n          }\n          return [...(old != null ? old : []), column.id];\n        });\n      },\n      getCanGroup: () => {\n        var _ref, _ref2, _ref3, _column$columnDef$ena;\n        return (_ref = (_ref2 = (_ref3 = (_column$columnDef$ena = column.columnDef.enableGrouping) != null ? _column$columnDef$ena : true) != null ? _ref3 : table.options.enableGrouping) != null ? _ref2 : true) != null ? _ref : !!column.accessorFn;\n      },\n      getIsGrouped: () => {\n        var _table$getState$group;\n        return (_table$getState$group = table.getState().grouping) == null ? void 0 : _table$getState$group.includes(column.id);\n      },\n      getGroupedIndex: () => {\n        var _table$getState$group2;\n        return (_table$getState$group2 = table.getState().grouping) == null ? void 0 : _table$getState$group2.indexOf(column.id);\n      },\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup();\n        return () => {\n          if (!canGroup) return;\n          column.toggleGrouping();\n        };\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0];\n        const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n        if (typeof value === 'number') {\n          return aggregationFns.sum;\n        }\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent;\n        }\n      },\n      getAggregationFn: () => {\n        var _table$options$aggreg, _table$options$aggreg2;\n        if (!column) {\n          throw new Error();\n        }\n        return isFunction(column.columnDef.aggregationFn) ? column.columnDef.aggregationFn : column.columnDef.aggregationFn === 'auto' ? column.getAutoAggregationFn() : (_table$options$aggreg = (_table$options$aggreg2 = table.options.aggregationFns) == null ? void 0 : _table$options$aggreg2[column.columnDef.aggregationFn]) != null ? _table$options$aggreg : aggregationFns[column.columnDef.aggregationFn];\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange == null ? void 0 : table.options.onGroupingChange(updater),\n      resetGrouping: defaultState => {\n        var _table$initialState$g, _table$initialState;\n        table.setGrouping(defaultState ? [] : (_table$initialState$g = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.grouping) != null ? _table$initialState$g : []);\n      },\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table);\n        }\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel();\n        }\n        return table._getGroupedRowModel();\n      }\n    };\n  },\n  createRow: row => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {}\n    };\n  },\n  createCell: (cell, column, row, table) => {\n    return {\n      getIsGrouped: () => column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () => {\n        var _row$subRows;\n        return !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n      }\n    };\n  }\n};\nfunction orderColumns(leafColumns, grouping, groupedColumnMode) {\n  if (!(grouping != null && grouping.length) || !groupedColumnMode) {\n    return leafColumns;\n  }\n  const nonGroupingColumns = leafColumns.filter(col => !grouping.includes(col.id));\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns;\n  }\n  const groupingColumns = grouping.map(g => leafColumns.find(col => col.id === g)).filter(Boolean);\n  return [...groupingColumns, ...nonGroupingColumns];\n}\n\n//\n\nconst Ordering = {\n  getInitialState: state => {\n    return {\n      columnOrder: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table)\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange == null ? void 0 : table.options.onColumnOrderChange(updater),\n      resetColumnOrder: defaultState => {\n        var _table$initialState$c;\n        table.setColumnOrder(defaultState ? [] : (_table$initialState$c = table.initialState.columnOrder) != null ? _table$initialState$c : []);\n      },\n      _getOrderColumnsFn: memo(() => [table.getState().columnOrder, table.getState().grouping, table.options.groupedColumnMode], (columnOrder, grouping, groupedColumnMode) => columns => {\n        // Sort grouped columns to the start of the column list\n        // before the headers are built\n        let orderedColumns = [];\n\n        // If there is no order, return the normal columns\n        if (!(columnOrder != null && columnOrder.length)) {\n          orderedColumns = columns;\n        } else {\n          const columnOrderCopy = [...columnOrder];\n\n          // If there is an order, make a copy of the columns\n          const columnsCopy = [...columns];\n\n          // And make a new ordered array of the columns\n\n          // Loop over the columns and place them in order into the new array\n          while (columnsCopy.length && columnOrderCopy.length) {\n            const targetColumnId = columnOrderCopy.shift();\n            const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId);\n            if (foundIndex > -1) {\n              orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]);\n            }\n          }\n\n          // If there are any columns left, add them to the end\n          orderedColumns = [...orderedColumns, ...columnsCopy];\n        }\n        return orderColumns(orderedColumns, grouping, groupedColumnMode);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn'\n        // debug: () => table.options.debugAll ?? table.options.debugTable,\n      })\n    };\n  }\n};\n\n//\n\nconst defaultPageIndex = 0;\nconst defaultPageSize = 10;\nconst getDefaultPaginationState = () => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize\n});\nconst Pagination = {\n  getInitialState: state => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...(state == null ? void 0 : state.pagination)\n      }\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table)\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    return {\n      _autoResetPageIndex: () => {\n        var _ref, _table$options$autoRe;\n        if (!registered) {\n          table._queue(() => {\n            registered = true;\n          });\n          return;\n        }\n        if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetPageIndex) != null ? _ref : !table.options.manualPagination) {\n          if (queued) return;\n          queued = true;\n          table._queue(() => {\n            table.resetPageIndex();\n            queued = false;\n          });\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater = old => {\n          let newState = functionalUpdate(updater, old);\n          return newState;\n        };\n        return table.options.onPaginationChange == null ? void 0 : table.options.onPaginationChange(safeUpdater);\n      },\n      resetPagination: defaultState => {\n        var _table$initialState$p;\n        table.setPagination(defaultState ? getDefaultPaginationState() : (_table$initialState$p = table.initialState.pagination) != null ? _table$initialState$p : getDefaultPaginationState());\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex);\n          const maxPageIndex = typeof table.options.pageCount === 'undefined' || table.options.pageCount === -1 ? Number.MAX_SAFE_INTEGER : table.options.pageCount - 1;\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex));\n          return {\n            ...old,\n            pageIndex\n          };\n        });\n      },\n      resetPageIndex: defaultState => {\n        var _table$initialState$p2, _table$initialState, _table$initialState$p3;\n        table.setPageIndex(defaultState ? defaultPageIndex : (_table$initialState$p2 = (_table$initialState = table.initialState) == null ? void 0 : (_table$initialState$p3 = _table$initialState.pagination) == null ? void 0 : _table$initialState$p3.pageIndex) != null ? _table$initialState$p2 : defaultPageIndex);\n      },\n      resetPageSize: defaultState => {\n        var _table$initialState$p4, _table$initialState2, _table$initialState2$;\n        table.setPageSize(defaultState ? defaultPageSize : (_table$initialState$p4 = (_table$initialState2 = table.initialState) == null ? void 0 : (_table$initialState2$ = _table$initialState2.pagination) == null ? void 0 : _table$initialState2$.pageSize) != null ? _table$initialState$p4 : defaultPageSize);\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize));\n          const topRowIndex = old.pageSize * old.pageIndex;\n          const pageIndex = Math.floor(topRowIndex / pageSize);\n          return {\n            ...old,\n            pageIndex,\n            pageSize\n          };\n        });\n      },\n      setPageCount: updater => table.setPagination(old => {\n        var _table$options$pageCo;\n        let newPageCount = functionalUpdate(updater, (_table$options$pageCo = table.options.pageCount) != null ? _table$options$pageCo : -1);\n        if (typeof newPageCount === 'number') {\n          newPageCount = Math.max(-1, newPageCount);\n        }\n        return {\n          ...old,\n          pageCount: newPageCount\n        };\n      }),\n      getPageOptions: memo(() => [table.getPageCount()], pageCount => {\n        let pageOptions = [];\n        if (pageCount && pageCount > 0) {\n          pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i);\n        }\n        return pageOptions;\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n        }\n      }),\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n      getCanNextPage: () => {\n        const {\n          pageIndex\n        } = table.getState().pagination;\n        const pageCount = table.getPageCount();\n        if (pageCount === -1) {\n          return true;\n        }\n        if (pageCount === 0) {\n          return false;\n        }\n        return pageIndex < pageCount - 1;\n      },\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1);\n      },\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1;\n        });\n      },\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (!table._getPaginationRowModel && table.options.getPaginationRowModel) {\n          table._getPaginationRowModel = table.options.getPaginationRowModel(table);\n        }\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel();\n        }\n        return table._getPaginationRowModel();\n      },\n      getPageCount: () => {\n        var _table$options$pageCo2;\n        return (_table$options$pageCo2 = table.options.pageCount) != null ? _table$options$pageCo2 : Math.ceil(table.getPrePaginationRowModel().rows.length / table.getState().pagination.pageSize);\n      }\n    };\n  }\n};\n\n//\n\nconst getDefaultPinningState = () => ({\n  left: [],\n  right: []\n});\nconst Pinning = {\n  getInitialState: state => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      pin: position => {\n        const columnIds = column.getLeafColumns().map(d => d.id).filter(Boolean);\n        table.setColumnPinning(old => {\n          var _old$left3, _old$right3;\n          if (position === 'right') {\n            var _old$left, _old$right;\n            return {\n              left: ((_old$left = old == null ? void 0 : old.left) != null ? _old$left : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n              right: [...((_old$right = old == null ? void 0 : old.right) != null ? _old$right : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds]\n            };\n          }\n          if (position === 'left') {\n            var _old$left2, _old$right2;\n            return {\n              left: [...((_old$left2 = old == null ? void 0 : old.left) != null ? _old$left2 : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds],\n              right: ((_old$right2 = old == null ? void 0 : old.right) != null ? _old$right2 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n            };\n          }\n          return {\n            left: ((_old$left3 = old == null ? void 0 : old.left) != null ? _old$left3 : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n            right: ((_old$right3 = old == null ? void 0 : old.right) != null ? _old$right3 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n          };\n        });\n      },\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns();\n        return leafColumns.some(d => {\n          var _d$columnDef$enablePi, _table$options$enable;\n          return ((_d$columnDef$enablePi = d.columnDef.enablePinning) != null ? _d$columnDef$enablePi : true) && ((_table$options$enable = table.options.enablePinning) != null ? _table$options$enable : true);\n        });\n      },\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id);\n        const {\n          left,\n          right\n        } = table.getState().columnPinning;\n        const isLeft = leafColumnIds.some(d => left == null ? void 0 : left.includes(d));\n        const isRight = leafColumnIds.some(d => right == null ? void 0 : right.includes(d));\n        return isLeft ? 'left' : isRight ? 'right' : false;\n      },\n      getPinnedIndex: () => {\n        var _table$getState$colum, _table$getState$colum2, _table$getState$colum3;\n        const position = column.getIsPinned();\n        return position ? (_table$getState$colum = (_table$getState$colum2 = table.getState().columnPinning) == null ? void 0 : (_table$getState$colum3 = _table$getState$colum2[position]) == null ? void 0 : _table$getState$colum3.indexOf(column.id)) != null ? _table$getState$colum : -1 : 0;\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      getCenterVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allCells, left, right) => {\n        const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n        return allCells.filter(d => !leftAndRight.includes(d.column.id));\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getCenterVisibleCells',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n        }\n      }),\n      getLeftVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left,,], (allCells, left) => {\n        const cells = (left != null ? left : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\n          ...d,\n          position: 'left'\n        }));\n        return cells;\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n        debug: () => {\n          var _table$options$debugA2;\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n        }\n      }),\n      getRightVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.right], (allCells, right) => {\n        const cells = (right != null ? right : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\n          ...d,\n          position: 'right'\n        }));\n        return cells;\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n        debug: () => {\n          var _table$options$debugA3;\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugRows;\n        }\n      })\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnPinning: updater => table.options.onColumnPinningChange == null ? void 0 : table.options.onColumnPinningChange(updater),\n      resetColumnPinning: defaultState => {\n        var _table$initialState$c, _table$initialState;\n        return table.setColumnPinning(defaultState ? getDefaultPinningState() : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnPinning) != null ? _table$initialState$c : getDefaultPinningState());\n      },\n      getIsSomeColumnsPinned: position => {\n        var _pinningState$positio;\n        const pinningState = table.getState().columnPinning;\n        if (!position) {\n          var _pinningState$left, _pinningState$right;\n          return Boolean(((_pinningState$left = pinningState.left) == null ? void 0 : _pinningState$left.length) || ((_pinningState$right = pinningState.right) == null ? void 0 : _pinningState$right.length));\n        }\n        return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);\n      },\n      getLeftLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left], (allColumns, left) => {\n        return (left != null ? left : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n        debug: () => {\n          var _table$options$debugA4;\n          return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugColumns;\n        }\n      }),\n      getRightLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.right], (allColumns, right) => {\n        return (right != null ? right : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n        debug: () => {\n          var _table$options$debugA5;\n          return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugColumns;\n        }\n      }),\n      getCenterLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, left, right) => {\n        const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n        return allColumns.filter(d => !leftAndRight.includes(d.id));\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n        debug: () => {\n          var _table$options$debugA6;\n          return (_table$options$debugA6 = table.options.debugAll) != null ? _table$options$debugA6 : table.options.debugColumns;\n        }\n      })\n    };\n  }\n};\n\n//\n\nconst RowSelection = {\n  getInitialState: state => {\n    return {\n      rowSelection: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    };\n  },\n\n  createTable: table => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange == null ? void 0 : table.options.onRowSelectionChange(updater),\n      resetRowSelection: defaultState => {\n        var _table$initialState$r;\n        return table.setRowSelection(defaultState ? {} : (_table$initialState$r = table.initialState.rowSelection) != null ? _table$initialState$r : {});\n      },\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected();\n          const rowSelection = {\n            ...old\n          };\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows;\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return;\n              }\n              rowSelection[row.id] = true;\n            });\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id];\n            });\n          }\n          return rowSelection;\n        });\n      },\n      toggleAllPageRowsSelected: value => table.setRowSelection(old => {\n        const resolvedValue = typeof value !== 'undefined' ? value : !table.getIsAllPageRowsSelected();\n        const rowSelection = {\n          ...old\n        };\n        table.getRowModel().rows.forEach(row => {\n          mutateRowIsSelected(rowSelection, row.id, resolvedValue, table);\n        });\n        return rowSelection;\n      }),\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(() => [table.getState().rowSelection, table.getCoreRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n        }\n      }),\n      getFilteredSelectedRowModel: memo(() => [table.getState().rowSelection, table.getFilteredRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'getFilteredSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA2;\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugTable;\n        }\n      }),\n      getGroupedSelectedRowModel: memo(() => [table.getState().rowSelection, table.getSortedRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'getGroupedSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA3;\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugTable;\n        }\n      }),\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows;\n        const {\n          rowSelection\n        } = table.getState();\n        let isAllRowsSelected = Boolean(preGroupedFlatRows.length && Object.keys(rowSelection).length);\n        if (isAllRowsSelected) {\n          if (preGroupedFlatRows.some(row => row.getCanSelect() && !rowSelection[row.id])) {\n            isAllRowsSelected = false;\n          }\n        }\n        return isAllRowsSelected;\n      },\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows.filter(row => row.getCanSelect());\n        const {\n          rowSelection\n        } = table.getState();\n        let isAllPageRowsSelected = !!paginationFlatRows.length;\n        if (isAllPageRowsSelected && paginationFlatRows.some(row => !rowSelection[row.id])) {\n          isAllPageRowsSelected = false;\n        }\n        return isAllPageRowsSelected;\n      },\n      getIsSomeRowsSelected: () => {\n        var _table$getState$rowSe;\n        const totalSelected = Object.keys((_table$getState$rowSe = table.getState().rowSelection) != null ? _table$getState$rowSe : {}).length;\n        return totalSelected > 0 && totalSelected < table.getFilteredRowModel().flatRows.length;\n      },\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows;\n        return table.getIsAllPageRowsSelected() ? false : paginationFlatRows.filter(row => row.getCanSelect()).some(d => d.getIsSelected() || d.getIsSomeSelected());\n      },\n      getToggleAllRowsSelectedHandler: () => {\n        return e => {\n          table.toggleAllRowsSelected(e.target.checked);\n        };\n      },\n      getToggleAllPageRowsSelectedHandler: () => {\n        return e => {\n          table.toggleAllPageRowsSelected(e.target.checked);\n        };\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected();\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected;\n          if (isSelected === value) {\n            return old;\n          }\n          const selectedRowIds = {\n            ...old\n          };\n          mutateRowIsSelected(selectedRowIds, row.id, value, table);\n          return selectedRowIds;\n        });\n      },\n      getIsSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isRowSelected(row, rowSelection);\n      },\n      getIsSomeSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isSubRowSelected(row, rowSelection) === 'some';\n      },\n      getIsAllSubRowsSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isSubRowSelected(row, rowSelection) === 'all';\n      },\n      getCanSelect: () => {\n        var _table$options$enable;\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row);\n        }\n        return (_table$options$enable = table.options.enableRowSelection) != null ? _table$options$enable : true;\n      },\n      getCanSelectSubRows: () => {\n        var _table$options$enable2;\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row);\n        }\n        return (_table$options$enable2 = table.options.enableSubRowSelection) != null ? _table$options$enable2 : true;\n      },\n      getCanMultiSelect: () => {\n        var _table$options$enable3;\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row);\n        }\n        return (_table$options$enable3 = table.options.enableMultiRowSelection) != null ? _table$options$enable3 : true;\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect();\n        return e => {\n          var _target;\n          if (!canSelect) return;\n          row.toggleSelected((_target = e.target) == null ? void 0 : _target.checked);\n        };\n      }\n    };\n  }\n};\nconst mutateRowIsSelected = (selectedRowIds, id, value, table) => {\n  var _row$subRows;\n  const row = table.getRow(id);\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key]);\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true;\n    }\n  } else {\n    delete selectedRowIds[id];\n  }\n  // }\n\n  if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row => mutateRowIsSelected(selectedRowIds, row.id, value, table));\n  }\n};\nfunction selectRowsFn(table, rowModel) {\n  const rowSelection = table.getState().rowSelection;\n  const newSelectedFlatRows = [];\n  const newSelectedRowsById = {};\n\n  // Filters top level and nested rows\n  const recurseRows = function (rows, depth) {\n    return rows.map(row => {\n      var _row$subRows2;\n      const isSelected = isRowSelected(row, rowSelection);\n      if (isSelected) {\n        newSelectedFlatRows.push(row);\n        newSelectedRowsById[row.id] = row;\n      }\n      if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {\n        row = {\n          ...row,\n          subRows: recurseRows(row.subRows)\n        };\n      }\n      if (isSelected) {\n        return row;\n      }\n    }).filter(Boolean);\n  };\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById\n  };\n}\nfunction isRowSelected(row, selection) {\n  var _selection$row$id;\n  return (_selection$row$id = selection[row.id]) != null ? _selection$row$id : false;\n}\nfunction isSubRowSelected(row, selection, table) {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true;\n    let someSelected = false;\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return;\n      }\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true;\n      } else {\n        allChildrenSelected = false;\n      }\n    });\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false;\n  }\n  return false;\n}\nconst reSplitAlphaNumeric = /([0-9]+)/gm;\nconst alphanumeric = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\nconst alphanumericCaseSensitive = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\nconst datetime = (rowA, rowB, columnId) => {\n  const a = rowA.getValue(columnId);\n  const b = rowB.getValue(columnId);\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0;\n};\nconst basic = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId));\n};\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return '';\n    }\n    return String(a);\n  }\n  if (typeof a === 'string') {\n    return a;\n  }\n  return '';\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr, bStr) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean);\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean);\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift();\n    const bb = b.shift();\n    const an = parseInt(aa, 10);\n    const bn = parseInt(bb, 10);\n    const combo = [an, bn].sort();\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1;\n      }\n      if (bb > aa) {\n        return -1;\n      }\n      continue;\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1;\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1;\n    }\n    if (bn > an) {\n      return -1;\n    }\n  }\n  return a.length - b.length;\n}\n\n// Exports\n\nconst sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic\n};\n\n//\n\nconst Sorting = {\n  getInitialState: state => {\n    return {\n      sorting: [],\n      ...state\n    };\n  },\n  getDefaultColumnDef: () => {\n    return {\n      sortingFn: 'auto'\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: e => {\n        return e.shiftKey;\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10);\n        let isString = false;\n        for (const row of firstRows) {\n          const value = row == null ? void 0 : row.getValue(column.id);\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime;\n          }\n          if (typeof value === 'string') {\n            isString = true;\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric;\n            }\n          }\n        }\n        if (isString) {\n          return sortingFns.text;\n        }\n        return sortingFns.basic;\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0];\n        const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n        if (typeof value === 'string') {\n          return 'asc';\n        }\n        return 'desc';\n      },\n      getSortingFn: () => {\n        var _table$options$sortin, _table$options$sortin2;\n        if (!column) {\n          throw new Error();\n        }\n        return isFunction(column.columnDef.sortingFn) ? column.columnDef.sortingFn : column.columnDef.sortingFn === 'auto' ? column.getAutoSortingFn() : (_table$options$sortin = (_table$options$sortin2 = table.options.sortingFns) == null ? void 0 : _table$options$sortin2[column.columnDef.sortingFn]) != null ? _table$options$sortin : sortingFns[column.columnDef.sortingFn];\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder();\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null;\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old == null ? void 0 : old.find(d => d.id === column.id);\n          const existingIndex = old == null ? void 0 : old.findIndex(d => d.id === column.id);\n          let newSorting = [];\n\n          // What should we do with this sort action?\n          let sortAction;\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc';\n\n          // Multi-mode\n          if (old != null && old.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle';\n            } else {\n              sortAction = 'add';\n            }\n          } else {\n            // Normal mode\n            if (old != null && old.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace';\n            } else if (existingSorting) {\n              sortAction = 'toggle';\n            } else {\n              sortAction = 'replace';\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove';\n              }\n            }\n          }\n          if (sortAction === 'add') {\n            var _table$options$maxMul;\n            newSorting = [...old, {\n              id: column.id,\n              desc: nextDesc\n            }];\n            // Take latest n columns\n            newSorting.splice(0, newSorting.length - ((_table$options$maxMul = table.options.maxMultiSortColCount) != null ? _table$options$maxMul : Number.MAX_SAFE_INTEGER));\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc\n                };\n              }\n              return d;\n            });\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id);\n          } else {\n            newSorting = [{\n              id: column.id,\n              desc: nextDesc\n            }];\n          }\n          return newSorting;\n        });\n      },\n      getFirstSortDir: () => {\n        var _ref, _column$columnDef$sor;\n        const sortDescFirst = (_ref = (_column$columnDef$sor = column.columnDef.sortDescFirst) != null ? _column$columnDef$sor : table.options.sortDescFirst) != null ? _ref : column.getAutoSortDir() === 'desc';\n        return sortDescFirst ? 'desc' : 'asc';\n      },\n      getNextSortingOrder: multi => {\n        var _table$options$enable, _table$options$enable2;\n        const firstSortDirection = column.getFirstSortDir();\n        const isSorted = column.getIsSorted();\n        if (!isSorted) {\n          return firstSortDirection;\n        }\n        if (isSorted !== firstSortDirection && ((_table$options$enable = table.options.enableSortingRemoval) != null ? _table$options$enable : true) && (\n        // If enableSortRemove, enable in general\n        multi ? (_table$options$enable2 = table.options.enableMultiRemove) != null ? _table$options$enable2 : true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false;\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc';\n      },\n      getCanSort: () => {\n        var _column$columnDef$ena, _table$options$enable3;\n        return ((_column$columnDef$ena = column.columnDef.enableSorting) != null ? _column$columnDef$ena : true) && ((_table$options$enable3 = table.options.enableSorting) != null ? _table$options$enable3 : true) && !!column.accessorFn;\n      },\n      getCanMultiSort: () => {\n        var _ref2, _column$columnDef$ena2;\n        return (_ref2 = (_column$columnDef$ena2 = column.columnDef.enableMultiSort) != null ? _column$columnDef$ena2 : table.options.enableMultiSort) != null ? _ref2 : !!column.accessorFn;\n      },\n      getIsSorted: () => {\n        var _table$getState$sorti;\n        const columnSort = (_table$getState$sorti = table.getState().sorting) == null ? void 0 : _table$getState$sorti.find(d => d.id === column.id);\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc';\n      },\n      getSortIndex: () => {\n        var _table$getState$sorti2, _table$getState$sorti3;\n        return (_table$getState$sorti2 = (_table$getState$sorti3 = table.getState().sorting) == null ? void 0 : _table$getState$sorti3.findIndex(d => d.id === column.id)) != null ? _table$getState$sorti2 : -1;\n      },\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old => old != null && old.length ? old.filter(d => d.id !== column.id) : []);\n      },\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort();\n        return e => {\n          if (!canSort) return;\n          e.persist == null ? void 0 : e.persist();\n          column.toggleSorting == null ? void 0 : column.toggleSorting(undefined, column.getCanMultiSort() ? table.options.isMultiSortEvent == null ? void 0 : table.options.isMultiSortEvent(e) : false);\n        };\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setSorting: updater => table.options.onSortingChange == null ? void 0 : table.options.onSortingChange(updater),\n      resetSorting: defaultState => {\n        var _table$initialState$s, _table$initialState;\n        table.setSorting(defaultState ? [] : (_table$initialState$s = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.sorting) != null ? _table$initialState$s : []);\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table);\n        }\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel();\n        }\n        return table._getSortedRowModel();\n      }\n    };\n  }\n};\n\n//\n\nconst Visibility = {\n  getInitialState: state => {\n    return {\n      columnVisibility: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value != null ? value : !column.getIsVisible()\n          }));\n        }\n      },\n      getIsVisible: () => {\n        var _table$getState$colum, _table$getState$colum2;\n        return (_table$getState$colum = (_table$getState$colum2 = table.getState().columnVisibility) == null ? void 0 : _table$getState$colum2[column.id]) != null ? _table$getState$colum : true;\n      },\n      getCanHide: () => {\n        var _column$columnDef$ena, _table$options$enable;\n        return ((_column$columnDef$ena = column.columnDef.enableHiding) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableHiding) != null ? _table$options$enable : true);\n      },\n      getToggleVisibilityHandler: () => {\n        return e => {\n          column.toggleVisibility == null ? void 0 : column.toggleVisibility(e.target.checked);\n        };\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      _getAllVisibleCells: memo(() => [row.getAllCells(), table.getState().columnVisibility], cells => {\n        return cells.filter(cell => cell.column.getIsVisible());\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n        }\n      }),\n      getVisibleCells: memo(() => [row.getLeftVisibleCells(), row.getCenterVisibleCells(), row.getRightVisibleCells()], (left, center, right) => [...left, ...center, ...right], {\n        key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n        debug: () => {\n          var _table$options$debugA2;\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n        }\n      })\n    };\n  },\n  createTable: table => {\n    const makeVisibleColumnsMethod = (key, getColumns) => {\n      return memo(() => [getColumns(), getColumns().filter(d => d.getIsVisible()).map(d => d.id).join('_')], columns => {\n        return columns.filter(d => d.getIsVisible == null ? void 0 : d.getIsVisible());\n      }, {\n        key,\n        debug: () => {\n          var _table$options$debugA3;\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugColumns;\n        }\n      });\n    };\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod('getVisibleFlatColumns', () => table.getAllFlatColumns()),\n      getVisibleLeafColumns: makeVisibleColumnsMethod('getVisibleLeafColumns', () => table.getAllLeafColumns()),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod('getLeftVisibleLeafColumns', () => table.getLeftLeafColumns()),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod('getRightVisibleLeafColumns', () => table.getRightLeafColumns()),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod('getCenterVisibleLeafColumns', () => table.getCenterLeafColumns()),\n      setColumnVisibility: updater => table.options.onColumnVisibilityChange == null ? void 0 : table.options.onColumnVisibilityChange(updater),\n      resetColumnVisibility: defaultState => {\n        var _table$initialState$c;\n        table.setColumnVisibility(defaultState ? {} : (_table$initialState$c = table.initialState.columnVisibility) != null ? _table$initialState$c : {});\n      },\n      toggleAllColumnsVisible: value => {\n        var _value;\n        value = (_value = value) != null ? _value : !table.getIsAllColumnsVisible();\n        table.setColumnVisibility(table.getAllLeafColumns().reduce((obj, column) => ({\n          ...obj,\n          [column.id]: !value ? !(column.getCanHide != null && column.getCanHide()) : value\n        }), {}));\n      },\n      getIsAllColumnsVisible: () => !table.getAllLeafColumns().some(column => !(column.getIsVisible != null && column.getIsVisible())),\n      getIsSomeColumnsVisible: () => table.getAllLeafColumns().some(column => column.getIsVisible == null ? void 0 : column.getIsVisible()),\n      getToggleAllColumnsVisibilityHandler: () => {\n        return e => {\n          var _target;\n          table.toggleAllColumnsVisible((_target = e.target) == null ? void 0 : _target.checked);\n        };\n      }\n    };\n  }\n};\nconst features = [Headers, Visibility, Ordering, Pinning, Filters, Sorting, Grouping, Expanding, Pagination, RowSelection, ColumnSizing];\n\n//\n\nfunction createTable(options) {\n  var _options$initialState;\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...');\n  }\n  let table = {\n    _features: features\n  };\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));\n  }, {});\n  const mergeOptions = options => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options);\n    }\n    return {\n      ...defaultOptions,\n      ...options\n    };\n  };\n  const coreInitialState = {};\n  let initialState = {\n    ...coreInitialState,\n    ...((_options$initialState = options.initialState) != null ? _options$initialState : {})\n  };\n  table._features.forEach(feature => {\n    var _feature$getInitialSt;\n    initialState = (_feature$getInitialSt = feature.getInitialState == null ? void 0 : feature.getInitialState(initialState)) != null ? _feature$getInitialSt : initialState;\n  });\n  const queued = [];\n  let queuedTimeout = false;\n  const coreInstance = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb);\n      if (!queuedTimeout) {\n        queuedTimeout = true;\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve().then(() => {\n          while (queued.length) {\n            queued.shift()();\n          }\n          queuedTimeout = false;\n        }).catch(error => setTimeout(() => {\n          throw error;\n        }));\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState);\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options);\n      table.options = mergeOptions(newOptions);\n    },\n    getState: () => {\n      return table.options.state;\n    },\n    setState: updater => {\n      table.options.onStateChange == null ? void 0 : table.options.onStateChange(updater);\n    },\n    _getRowId: (row, index, parent) => {\n      var _table$options$getRow;\n      return (_table$options$getRow = table.options.getRowId == null ? void 0 : table.options.getRowId(row, index, parent)) != null ? _table$options$getRow : `${parent ? [parent.id, index].join('.') : index}`;\n    },\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table);\n      }\n      return table._getCoreRowModel();\n    },\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel();\n    },\n    getRow: id => {\n      const row = table.getRowModel().rowsById[id];\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`);\n        }\n        throw new Error();\n      }\n      return row;\n    },\n    _getDefaultColumnDef: memo(() => [table.options.defaultColumn], defaultColumn => {\n      var _defaultColumn;\n      defaultColumn = (_defaultColumn = defaultColumn) != null ? _defaultColumn : {};\n      return {\n        header: props => {\n          const resolvedColumnDef = props.header.column.columnDef;\n          if (resolvedColumnDef.accessorKey) {\n            return resolvedColumnDef.accessorKey;\n          }\n          if (resolvedColumnDef.accessorFn) {\n            return resolvedColumnDef.id;\n          }\n          return null;\n        },\n        // footer: props => props.header.column.id,\n        cell: props => {\n          var _props$renderValue$to, _props$renderValue;\n          return (_props$renderValue$to = (_props$renderValue = props.renderValue()) == null ? void 0 : _props$renderValue.toString == null ? void 0 : _props$renderValue.toString()) != null ? _props$renderValue$to : null;\n        },\n        ...table._features.reduce((obj, feature) => {\n          return Object.assign(obj, feature.getDefaultColumnDef == null ? void 0 : feature.getDefaultColumnDef());\n        }, {}),\n        ...defaultColumn\n      };\n    }, {\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugColumns;\n      },\n      key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef'\n    }),\n    _getColumnDefs: () => table.options.columns,\n    getAllColumns: memo(() => [table._getColumnDefs()], columnDefs => {\n      const recurseColumns = function (columnDefs, parent, depth) {\n        if (depth === void 0) {\n          depth = 0;\n        }\n        return columnDefs.map(columnDef => {\n          const column = createColumn(table, columnDef, depth, parent);\n          const groupingColumnDef = columnDef;\n          column.columns = groupingColumnDef.columns ? recurseColumns(groupingColumnDef.columns, column, depth + 1) : [];\n          return column;\n        });\n      };\n      return recurseColumns(columnDefs);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n      debug: () => {\n        var _table$options$debugA2;\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugColumns;\n      }\n    }),\n    getAllFlatColumns: memo(() => [table.getAllColumns()], allColumns => {\n      return allColumns.flatMap(column => {\n        return column.getFlatColumns();\n      });\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n      debug: () => {\n        var _table$options$debugA3;\n        return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugColumns;\n      }\n    }),\n    _getAllFlatColumnsById: memo(() => [table.getAllFlatColumns()], flatColumns => {\n      return flatColumns.reduce((acc, column) => {\n        acc[column.id] = column;\n        return acc;\n      }, {});\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n      debug: () => {\n        var _table$options$debugA4;\n        return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugColumns;\n      }\n    }),\n    getAllLeafColumns: memo(() => [table.getAllColumns(), table._getOrderColumnsFn()], (allColumns, orderColumns) => {\n      let leafColumns = allColumns.flatMap(column => column.getLeafColumns());\n      return orderColumns(leafColumns);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n      debug: () => {\n        var _table$options$debugA5;\n        return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugColumns;\n      }\n    }),\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId];\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`);\n      }\n      return column;\n    }\n  };\n  Object.assign(table, coreInstance);\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable == null ? void 0 : feature.createTable(table));\n  });\n  return table;\n}\nfunction createCell(table, row, column, columnId) {\n  const getRenderValue = () => {\n    var _cell$getValue;\n    return (_cell$getValue = cell.getValue()) != null ? _cell$getValue : table.options.renderFallbackValue;\n  };\n  const cell = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(() => [table, column, row, cell], (table, column, row, cell) => ({\n      table,\n      column,\n      row,\n      cell: cell,\n      getValue: cell.getValue,\n      renderValue: cell.renderValue\n    }), {\n      key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n      debug: () => table.options.debugAll\n    })\n  };\n  table._features.forEach(feature => {\n    Object.assign(cell, feature.createCell == null ? void 0 : feature.createCell(cell, column, row, table));\n  }, {});\n  return cell;\n}\nconst createRow = (table, id, original, rowIndex, depth, subRows, parentId) => {\n  let row = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!(column != null && column.accessorFn)) {\n        return undefined;\n      }\n      row._valuesCache[columnId] = column.accessorFn(row.original, rowIndex);\n      return row._valuesCache[columnId];\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!(column != null && column.accessorFn)) {\n        return undefined;\n      }\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)];\n        return row._uniqueValuesCache[columnId];\n      }\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(row.original, rowIndex);\n      return row._uniqueValuesCache[columnId];\n    },\n    renderValue: columnId => {\n      var _row$getValue;\n      return (_row$getValue = row.getValue(columnId)) != null ? _row$getValue : table.options.renderFallbackValue;\n    },\n    subRows: subRows != null ? subRows : [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => row.parentId ? table.getRow(row.parentId) : undefined,\n    getParentRows: () => {\n      let parentRows = [];\n      let currentRow = row;\n      while (true) {\n        const parentRow = currentRow.getParentRow();\n        if (!parentRow) break;\n        parentRows.push(parentRow);\n        currentRow = parentRow;\n      }\n      return parentRows.reverse();\n    },\n    getAllCells: memo(() => [table.getAllLeafColumns()], leafColumns => {\n      return leafColumns.map(column => {\n        return createCell(table, row, column, column.id);\n      });\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n      }\n    }),\n    _getAllCellsByColumnId: memo(() => [row.getAllCells()], allCells => {\n      return allCells.reduce((acc, cell) => {\n        acc[cell.column.id] = cell;\n        return acc;\n      }, {});\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n      debug: () => {\n        var _table$options$debugA2;\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n      }\n    })\n  };\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i];\n    Object.assign(row, feature == null ? void 0 : feature.createRow == null ? void 0 : feature.createRow(row, table));\n  }\n  return row;\n};\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\nfunction createColumnHelper() {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function' ? {\n        ...column,\n        accessorFn: accessor\n      } : {\n        ...column,\n        accessorKey: accessor\n      };\n    },\n    display: column => column,\n    group: column => column\n  };\n}\nfunction getCoreRowModel() {\n  return table => memo(() => [table.options.data], data => {\n    const rowModel = {\n      rows: [],\n      flatRows: [],\n      rowsById: {}\n    };\n    const accessRows = function (originalRows, depth, parentRow) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n      const rows = [];\n      for (let i = 0; i < originalRows.length; i++) {\n        // This could be an expensive check at scale, so we should move it somewhere else, but where?\n        // if (!id) {\n        //   if (process.env.NODE_ENV !== 'production') {\n        //     throw new Error(`getRowId expected an ID, but got ${id}`)\n        //   }\n        // }\n\n        // Make the row\n        const row = createRow(table, table._getRowId(originalRows[i], i, parentRow), originalRows[i], i, depth, undefined, parentRow == null ? void 0 : parentRow.id);\n\n        // Keep track of every row in a flat array\n        rowModel.flatRows.push(row);\n        // Also keep track of every row by its ID\n        rowModel.rowsById[row.id] = row;\n        // Push table row into parent\n        rows.push(row);\n\n        // Get the original subrows\n        if (table.options.getSubRows) {\n          var _row$originalSubRows;\n          row.originalSubRows = table.options.getSubRows(originalRows[i], i);\n\n          // Then recursively access them\n          if ((_row$originalSubRows = row.originalSubRows) != null && _row$originalSubRows.length) {\n            row.subRows = accessRows(row.originalSubRows, depth + 1, row);\n          }\n        }\n      }\n      return rows;\n    };\n    rowModel.rows = accessRows(data);\n    return rowModel;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\nfunction filterRows(rows, filterRowImpl, table) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table);\n  }\n  return filterRowModelFromRoot(rows, filterRowImpl, table);\n}\nfunction filterRowModelFromLeafs(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea;\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n  const maxDepth = (_table$options$maxLea = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea : 100;\n  const recurseFilterRows = function (rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n    const rows = [];\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      var _row$subRows;\n      let row = rowsToFilter[i];\n      const newRow = createRow(table, row.id, row.original, row.index, row.depth, undefined, row.parentId);\n      newRow.columnFilters = row.columnFilters;\n      if ((_row$subRows = row.subRows) != null && _row$subRows.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n        row = newRow;\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredRowsById[i] = row;\n          continue;\n        }\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredRowsById[i] = row;\n          continue;\n        }\n      } else {\n        row = newRow;\n        if (filterRow(row)) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredRowsById[i] = row;\n        }\n      }\n    }\n    return rows;\n  };\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\nfunction filterRowModelFromRoot(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea2;\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n  const maxDepth = (_table$options$maxLea2 = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea2 : 100;\n\n  // Filters top level and nested rows\n  const recurseFilterRows = function (rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n    // Filter from parents downward first\n\n    const rows = [];\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i];\n      const pass = filterRow(row);\n      if (pass) {\n        var _row$subRows2;\n        if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length && depth < maxDepth) {\n          const newRow = createRow(table, row.id, row.original, row.index, row.depth, undefined, row.parentId);\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n          row = newRow;\n        }\n        rows.push(row);\n        newFilteredFlatRows.push(row);\n        newFilteredRowsById[row.id] = row;\n      }\n    }\n    return rows;\n  };\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\nfunction getFilteredRowModel() {\n  return table => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter], (rowModel, columnFilters, globalFilter) => {\n    if (!rowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      for (let i = 0; i < rowModel.flatRows.length; i++) {\n        rowModel.flatRows[i].columnFilters = {};\n        rowModel.flatRows[i].columnFiltersMeta = {};\n      }\n      return rowModel;\n    }\n    const resolvedColumnFilters = [];\n    const resolvedGlobalFilters = [];\n    (columnFilters != null ? columnFilters : []).forEach(d => {\n      var _filterFn$resolveFilt;\n      const column = table.getColumn(d.id);\n      if (!column) {\n        return;\n      }\n      const filterFn = column.getFilterFn();\n      if (!filterFn) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`);\n        }\n        return;\n      }\n      resolvedColumnFilters.push({\n        id: d.id,\n        filterFn,\n        resolvedValue: (_filterFn$resolveFilt = filterFn.resolveFilterValue == null ? void 0 : filterFn.resolveFilterValue(d.value)) != null ? _filterFn$resolveFilt : d.value\n      });\n    });\n    const filterableIds = columnFilters.map(d => d.id);\n    const globalFilterFn = table.getGlobalFilterFn();\n    const globallyFilterableColumns = table.getAllLeafColumns().filter(column => column.getCanGlobalFilter());\n    if (globalFilter && globalFilterFn && globallyFilterableColumns.length) {\n      filterableIds.push('__global__');\n      globallyFilterableColumns.forEach(column => {\n        var _globalFilterFn$resol;\n        resolvedGlobalFilters.push({\n          id: column.id,\n          filterFn: globalFilterFn,\n          resolvedValue: (_globalFilterFn$resol = globalFilterFn.resolveFilterValue == null ? void 0 : globalFilterFn.resolveFilterValue(globalFilter)) != null ? _globalFilterFn$resol : globalFilter\n        });\n      });\n    }\n    let currentColumnFilter;\n    let currentGlobalFilter;\n\n    // Flag the prefiltered row model with each filter state\n    for (let j = 0; j < rowModel.flatRows.length; j++) {\n      const row = rowModel.flatRows[j];\n      row.columnFilters = {};\n      if (resolvedColumnFilters.length) {\n        for (let i = 0; i < resolvedColumnFilters.length; i++) {\n          currentColumnFilter = resolvedColumnFilters[i];\n          const id = currentColumnFilter.id;\n\n          // Tag the row with the column filter state\n          row.columnFilters[id] = currentColumnFilter.filterFn(row, id, currentColumnFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          });\n        }\n      }\n      if (resolvedGlobalFilters.length) {\n        for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n          currentGlobalFilter = resolvedGlobalFilters[i];\n          const id = currentGlobalFilter.id;\n          // Tag the row with the first truthy global filter state\n          if (currentGlobalFilter.filterFn(row, id, currentGlobalFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          })) {\n            row.columnFilters.__global__ = true;\n            break;\n          }\n        }\n        if (row.columnFilters.__global__ !== true) {\n          row.columnFilters.__global__ = false;\n        }\n      }\n    }\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    // Filter final rows using all of the active filters\n    return filterRows(rowModel.rows, filterRowsImpl, table);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\nfunction getFacetedRowModel() {\n  return (table, columnId) => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter, table.getFilteredRowModel()], (preRowModel, columnFilters, globalFilter) => {\n    if (!preRowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      return preRowModel;\n    }\n    const filterableIds = [...columnFilters.map(d => d.id).filter(d => d !== columnId), globalFilter ? '__global__' : undefined].filter(Boolean);\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n      return true;\n    };\n    return filterRows(preRowModel.rows, filterRowsImpl, table);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedRowModel_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\nfunction getFacetedUniqueValues() {\n  return (table, columnId) => memo(() => {\n    var _table$getColumn;\n    return [(_table$getColumn = table.getColumn(columnId)) == null ? void 0 : _table$getColumn.getFacetedRowModel()];\n  }, facetedRowModel => {\n    if (!facetedRowModel) return new Map();\n    let facetedUniqueValues = new Map();\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      const values = facetedRowModel.flatRows[i].getUniqueValues(columnId);\n      for (let j = 0; j < values.length; j++) {\n        const value = values[j];\n        if (facetedUniqueValues.has(value)) {\n          var _facetedUniqueValues$;\n          facetedUniqueValues.set(value, ((_facetedUniqueValues$ = facetedUniqueValues.get(value)) != null ? _facetedUniqueValues$ : 0) + 1);\n        } else {\n          facetedUniqueValues.set(value, 1);\n        }\n      }\n    }\n    return facetedUniqueValues;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedUniqueValues_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\nfunction getFacetedMinMaxValues() {\n  return (table, columnId) => memo(() => {\n    var _table$getColumn;\n    return [(_table$getColumn = table.getColumn(columnId)) == null ? void 0 : _table$getColumn.getFacetedRowModel()];\n  }, facetedRowModel => {\n    var _facetedRowModel$flat;\n    if (!facetedRowModel) return undefined;\n    const firstValue = (_facetedRowModel$flat = facetedRowModel.flatRows[0]) == null ? void 0 : _facetedRowModel$flat.getUniqueValues(columnId);\n    if (typeof firstValue === 'undefined') {\n      return undefined;\n    }\n    let facetedMinMaxValues = [firstValue, firstValue];\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      const values = facetedRowModel.flatRows[i].getUniqueValues(columnId);\n      for (let j = 0; j < values.length; j++) {\n        const value = values[j];\n        if (value < facetedMinMaxValues[0]) {\n          facetedMinMaxValues[0] = value;\n        } else if (value > facetedMinMaxValues[1]) {\n          facetedMinMaxValues[1] = value;\n        }\n      }\n    }\n    return facetedMinMaxValues;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedMinMaxValues_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\nfunction getSortedRowModel() {\n  return table => memo(() => [table.getState().sorting, table.getPreSortedRowModel()], (sorting, rowModel) => {\n    if (!rowModel.rows.length || !(sorting != null && sorting.length)) {\n      return rowModel;\n    }\n    const sortingState = table.getState().sorting;\n    const sortedFlatRows = [];\n\n    // Filter out sortings that correspond to non existing columns\n    const availableSorting = sortingState.filter(sort => {\n      var _table$getColumn;\n      return (_table$getColumn = table.getColumn(sort.id)) == null ? void 0 : _table$getColumn.getCanSort();\n    });\n    const columnInfoById = {};\n    availableSorting.forEach(sortEntry => {\n      const column = table.getColumn(sortEntry.id);\n      if (!column) return;\n      columnInfoById[sortEntry.id] = {\n        sortUndefined: column.columnDef.sortUndefined,\n        invertSorting: column.columnDef.invertSorting,\n        sortingFn: column.getSortingFn()\n      };\n    });\n    const sortData = rows => {\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = [...rows];\n      sortedData.sort((rowA, rowB) => {\n        for (let i = 0; i < availableSorting.length; i += 1) {\n          var _sortEntry$desc;\n          const sortEntry = availableSorting[i];\n          const columnInfo = columnInfoById[sortEntry.id];\n          const isDesc = (_sortEntry$desc = sortEntry == null ? void 0 : sortEntry.desc) != null ? _sortEntry$desc : false;\n          if (columnInfo.sortUndefined) {\n            const aValue = rowA.getValue(sortEntry.id);\n            const bValue = rowB.getValue(sortEntry.id);\n            const aUndefined = typeof aValue === 'undefined';\n            const bUndefined = typeof bValue === 'undefined';\n            if (aUndefined || bUndefined) {\n              return aUndefined && bUndefined ? 0 : aUndefined ? columnInfo.sortUndefined : -columnInfo.sortUndefined;\n            }\n          }\n\n          // This function should always return in ascending order\n          let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id);\n          if (sortInt !== 0) {\n            if (isDesc) {\n              sortInt *= -1;\n            }\n            if (columnInfo.invertSorting) {\n              sortInt *= -1;\n            }\n            return sortInt;\n          }\n        }\n        return rowA.index - rowB.index;\n      });\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        var _row$subRows;\n        sortedFlatRows.push(row);\n        if ((_row$subRows = row.subRows) != null && _row$subRows.length) {\n          row.subRows = sortData(row.subRows);\n        }\n      });\n      return sortedData;\n    };\n    return {\n      rows: sortData(rowModel.rows),\n      flatRows: sortedFlatRows,\n      rowsById: rowModel.rowsById\n    };\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\nfunction getGroupedRowModel() {\n  return table => memo(() => [table.getState().grouping, table.getPreGroupedRowModel()], (grouping, rowModel) => {\n    if (!rowModel.rows.length || !grouping.length) {\n      return rowModel;\n    }\n\n    // Filter the grouping list down to columns that exist\n    const existingGrouping = grouping.filter(columnId => table.getColumn(columnId));\n    const groupedFlatRows = [];\n    const groupedRowsById = {};\n    // const onlyGroupedFlatRows: Row[] = [];\n    // const onlyGroupedRowsById: Record<RowId, Row> = {};\n    // const nonGroupedFlatRows: Row[] = [];\n    // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n    // Recursively group the data\n    const groupUpRecursively = function (rows, depth, parentId) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n      // Grouping depth has been been met\n      // Stop grouping and simply rewrite thd depth and row relationships\n      if (depth >= existingGrouping.length) {\n        return rows.map(row => {\n          row.depth = depth;\n          groupedFlatRows.push(row);\n          groupedRowsById[row.id] = row;\n          if (row.subRows) {\n            row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id);\n          }\n          return row;\n        });\n      }\n      const columnId = existingGrouping[depth];\n\n      // Group the rows together for this level\n      const rowGroupsMap = groupBy(rows, columnId);\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map((_ref, index) => {\n        let [groupingValue, groupedRows] = _ref;\n        let id = `${columnId}:${groupingValue}`;\n        id = parentId ? `${parentId}>${id}` : id;\n\n        // First, Recurse to group sub rows before aggregation\n        const subRows = groupUpRecursively(groupedRows, depth + 1, id);\n\n        // Flatten the leaf rows of the rows in this group\n        const leafRows = depth ? flattenBy(groupedRows, row => row.subRows) : groupedRows;\n        const row = createRow(table, id, leafRows[0].original, index, depth, undefined, parentId);\n        Object.assign(row, {\n          groupingColumnId: columnId,\n          groupingValue,\n          subRows,\n          leafRows,\n          getValue: columnId => {\n            // Don't aggregate columns that are in the grouping\n            if (existingGrouping.includes(columnId)) {\n              if (row._valuesCache.hasOwnProperty(columnId)) {\n                return row._valuesCache[columnId];\n              }\n              if (groupedRows[0]) {\n                var _groupedRows$0$getVal;\n                row._valuesCache[columnId] = (_groupedRows$0$getVal = groupedRows[0].getValue(columnId)) != null ? _groupedRows$0$getVal : undefined;\n              }\n              return row._valuesCache[columnId];\n            }\n            if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n              return row._groupingValuesCache[columnId];\n            }\n\n            // Aggregate the values\n            const column = table.getColumn(columnId);\n            const aggregateFn = column == null ? void 0 : column.getAggregationFn();\n            if (aggregateFn) {\n              row._groupingValuesCache[columnId] = aggregateFn(columnId, leafRows, groupedRows);\n              return row._groupingValuesCache[columnId];\n            }\n          }\n        });\n        subRows.forEach(subRow => {\n          groupedFlatRows.push(subRow);\n          groupedRowsById[subRow.id] = subRow;\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        });\n\n        return row;\n      });\n      return aggregatedGroupedRows;\n    };\n    const groupedRows = groupUpRecursively(rowModel.rows, 0);\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow);\n      groupedRowsById[subRow.id] = subRow;\n      // if (subRow.getIsGrouped?.()) {\n      //   onlyGroupedFlatRows.push(subRow);\n      //   onlyGroupedRowsById[subRow.id] = subRow;\n      // } else {\n      //   nonGroupedFlatRows.push(subRow);\n      //   nonGroupedRowsById[subRow.id] = subRow;\n      // }\n    });\n\n    return {\n      rows: groupedRows,\n      flatRows: groupedFlatRows,\n      rowsById: groupedRowsById\n    };\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._queue(() => {\n        table._autoResetExpanded();\n        table._autoResetPageIndex();\n      });\n    }\n  });\n}\nfunction groupBy(rows, columnId) {\n  const groupMap = new Map();\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`;\n    const previous = map.get(resKey);\n    if (!previous) {\n      map.set(resKey, [row]);\n    } else {\n      previous.push(row);\n    }\n    return map;\n  }, groupMap);\n}\nfunction getExpandedRowModel() {\n  return table => memo(() => [table.getState().expanded, table.getPreExpandedRowModel(), table.options.paginateExpandedRows], (expanded, rowModel, paginateExpandedRows) => {\n    if (!rowModel.rows.length || expanded !== true && !Object.keys(expanded != null ? expanded : {}).length) {\n      return rowModel;\n    }\n    if (!paginateExpandedRows) {\n      // Only expand rows at this point if they are being paginated\n      return rowModel;\n    }\n    return expandRows(rowModel);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    }\n  });\n}\nfunction expandRows(rowModel) {\n  const expandedRows = [];\n  const handleRow = row => {\n    var _row$subRows;\n    expandedRows.push(row);\n    if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow);\n    }\n  };\n  rowModel.rows.forEach(handleRow);\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById\n  };\n}\nfunction getPaginationRowModel(opts) {\n  return table => memo(() => [table.getState().pagination, table.getPrePaginationRowModel(), table.options.paginateExpandedRows ? undefined : table.getState().expanded], (pagination, rowModel) => {\n    if (!rowModel.rows.length) {\n      return rowModel;\n    }\n    const {\n      pageSize,\n      pageIndex\n    } = pagination;\n    let {\n      rows,\n      flatRows,\n      rowsById\n    } = rowModel;\n    const pageStart = pageSize * pageIndex;\n    const pageEnd = pageStart + pageSize;\n    rows = rows.slice(pageStart, pageEnd);\n    let paginatedRowModel;\n    if (!table.options.paginateExpandedRows) {\n      paginatedRowModel = expandRows({\n        rows,\n        flatRows,\n        rowsById\n      });\n    } else {\n      paginatedRowModel = {\n        rows,\n        flatRows,\n        rowsById\n      };\n    }\n    paginatedRowModel.flatRows = [];\n    const handleRow = row => {\n      paginatedRowModel.flatRows.push(row);\n      if (row.subRows.length) {\n        row.subRows.forEach(handleRow);\n      }\n    };\n    paginatedRowModel.rows.forEach(handleRow);\n    return paginatedRowModel;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    }\n  });\n}\nexport { ColumnSizing, Expanding, Filters, Grouping, Headers, Ordering, Pagination, Pinning, RowSelection, Sorting, Visibility, aggregationFns, buildHeaderGroups, createCell, createColumn, createColumnHelper, createRow, createTable, defaultColumnSizing, expandRows, filterFns, flattenBy, functionalUpdate, getCoreRowModel, getExpandedRowModel, getFacetedMinMaxValues, getFacetedRowModel, getFacetedUniqueValues, getFilteredRowModel, getGroupedRowModel, getPaginationRowModel, getSortedRowModel, isFunction, isRowSelected, isSubRowSelected, makeStateUpdater, memo, noop, orderColumns, passiveEventSupported, reSplitAlphaNumeric, selectRowsFn, shouldAutoRemoveFilter, sortingFns };","map":{"version":3,"mappings":"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","names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","depsChanged","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","defaultColumn","_getDefaultColumnDef","resolvedColumnDef","accessorKey","id","replace","undefined","header","accessorFn","includes","originalRow","split","_result","process","env","NODE_ENV","warn","Error","column","columns","getFlatColumns","_column$columns","flatMap","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_features","reduce","obj","feature","Object","assign","createHeader","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","leftColumns","columnId","find","filter","Boolean","rightColumns","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","orderedLeafColumns","getRightHeaderGroups","getFooterGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headers","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","_header$subHeaders","getLeftLeafHeaders","_header$subHeaders2","getRightLeafHeaders","_header$subHeaders3","center","_left$","_center$","_right$","columnsToGroup","headerFamily","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","_ref","childColSpan","childRowSpan","minChildRowSpan","_headerGroups$","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","getDefaultColumnSizingInfoState","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","enableResizing","enableColumnResizing","getIsResizing","sum","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","newColumnSizing","updateOffset","eventType","clientXPos","setColumnSizingInfo","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","initialState","resetHeaderSizeInfo","getTotalSize","_table$getHeaderGroup2","getLeftTotalSize","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader2","passiveSupported","supported","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_queue","autoResetAll","autoResetExpanded","manualExpanding","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState","getCanSomeRowsExpand","getPrePaginationRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getRowModel","getIsExpanded","getExpandedDepth","rowIds","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","exists","oldExpanded","rowId","getIsRowExpanded","getRowCanExpand","enableExpanding","subRows","_row$subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","search","toLowerCase","getValue","_row$getValue","toString","_row$getValue$toStrin","_row$getValue$toStrin2","autoRemove","val","testFalsey","includesStringSensitive","_row$getValue2","_row$getValue2$toStri","equalsString","_row$getValue3","_row$getValue3$toStri","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","value","getCoreRowModel","_table$getCoreRowMode","_getAllCellsByColumnId","_table$getCoreRowMode2","getAutoFilterFn","firstRow","Array","isArray","getFilterFn","_table$options$filter2","getCanFilter","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum4","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","newFilterObj","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter4","getAllLeafColumns","updateFn","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","unique","from","Set","uniqueCount","_columnId","aggregationFns","Grouping","aggregatedCell","props","_props$getValue","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","_table$options$aggreg2","resetGrouping","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","groupingColumns","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","pagination","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","setPageIndex","maxPageIndex","pageCount","_table$initialState$p3","resetPageSize","setPageSize","_table$initialState2","_table$initialState2$","topRowIndex","floor","setPageCount","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPaginationRowModel","_getPaginationRowModel","ceil","rows","getDefaultPinningState","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","getCanPin","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","_table$getState$colum3","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","cells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","pinningState","_pinningState$left","_pinningState$right","_pinningState$positio","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","a","b","basic","aStr","bStr","aa","bb","an","parseInt","bn","combo","sort","sortingFns","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","_table$options$sortin2","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","newSorting","sortAction","nextDesc","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","columnSort","_table$getState$sorti","getSortIndex","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","defaultOptions","mergeOptions","coreInitialState","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","renderValue","_props$renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","getRenderValue","renderFallbackValue","original","rowIndex","parentId","_valuesCache","_uniqueValuesCache","hasOwnProperty","getUniqueValues","getLeafRows","getParentRow","getParentRows","parentRows","currentRow","parentRow","createColumnHelper","accessor","display","group","data","accessRows","originalRows","getSubRows","originalSubRows","_row$originalSubRows","filterRows","filterRowImpl","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","pass","resolvedColumnFilters","resolvedGlobalFilters","filterableIds","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","j","filterMeta","__global__","filterRowsImpl","preRowModel","_table$getColumn","facetedRowModel","facetedUniqueValues","has","set","get","firstValue","_facetedRowModel$flat","facetedMinMaxValues","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","columnInfo","isDesc","aValue","bValue","aUndefined","bUndefined","sortInt","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","aggregateFn","groupMap","resKey","previous","expandRows","expandedRows","handleRow","pageStart","pageEnd","paginatedRowModel"],"sources":["/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/utils.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/core/column.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/core/headers.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/features/ColumnSizing.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/features/Expanding.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/filterFns.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/features/Filters.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/aggregationFns.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/features/Grouping.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/features/Ordering.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/features/Pagination.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/features/Pinning.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/features/RowSelection.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/sortingFns.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/features/Sorting.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/features/Visibility.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/core/table.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/core/cell.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/core/row.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/columnHelper.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/utils/getCoreRowModel.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/utils/filterRowsUtils.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/utils/getFilteredRowModel.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/utils/getFacetedRowModel.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/utils/getFacetedUniqueValues.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/utils/getFacetedMinMaxValues.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/utils/getSortedRowModel.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/utils/getGroupedRowModel.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/utils/getExpandedRowModel.ts","/home/test/Desktop/Anil-Inventory-Management-Tool/client/node_modules/@tanstack/table-core/src/utils/getPaginationRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column?.getCanResize()\n\n        return (e: unknown) => {\n          if (!column || !canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const newColumnSizing: ColumnSizingState = {}\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table\n          .getPrePaginationRowModel()\n          .flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(\n    row\n      .getValue<string | null>(columnId)\n      ?.toString()\n      ?.toLowerCase()\n      ?.includes(search)\n  )\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(\n    row.getValue<string | null>(columnId)?.toString()?.includes(filterValue)\n  )\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string | null>(columnId)?.toString()?.toLowerCase() ===\n    filterValue?.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore \n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(row: Row<TData>): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table\n          .getPaginationRowModel()\n          .flatRows.filter(row => row.getCanSelect())\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows\n              .filter(row => row.getCanSelect())\n              .some(d => d.getIsSelected() || d.getIsSomeSelected())\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  parentId?: string\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n  getParentRow: () => Row<TData> | undefined\n  getParentRows: () => Row<TData>[]\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[],\n  parentId?: string\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => (row.parentId ? table.getRow(row.parentId) : undefined),\n    getParentRows: () => {\n      let parentRows: Row<TData>[] = []\n      let currentRow = row\n      while (true) {\n        const parentRow = currentRow.getParentRow()\n        if (!parentRow) break\n        parentRows.push(parentRow)\n        currentRow = parentRow\n      }\n      return parentRows.reverse()\n    },\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parentRow?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parentRow),\n              originalRows[i]!,\n              i,\n              depth,\n              undefined,\n              parentRow?.id\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        undefined,\n        row.parentId\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth,\n            undefined,\n            row.parentId\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if (!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth,\n                undefined,\n                parentId\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0)\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}